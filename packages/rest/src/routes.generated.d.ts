// This file is generated by scripts/gen-routes.js
// Do not modify directly.
// @no-line-count

import * as Discord from 'discord-api-types/rest';
import { FileData } from './types';
import { Route, RouteGroup, RouteGroupClass } from './route-group';

export type ApplicationCommand = RouteGroup<{
  /**
   * ## [Get Global Application Commands](https://discordapp.com/developers/docs/interactions/application-commands#get-global-application-commands)
   * 
   * The objects returned by this endpoint may be augmented with [additional fields if localization is active](https://discordapp.com/developers/docs/interactions/application-commands#retrieving-localized-commands).
   * 
   * Fetch all of the global commands for your application. Returns an array of [application command](#DOCS_INTERACTIONS_APPLICATION_COMMANDS/application-command-object) objects.
   */
  getGlobalApplicationCommands: Route<{
    params: ["applicationId"],
    query: { with_localizations?: boolean },
    result: Discord.RESTGetAPIApplicationCommandsResult,
  }>,
  /**
   * ## [Create Global Application Command](https://discordapp.com/developers/docs/interactions/application-commands#create-global-application-command)
   * 
   * Creating a command with the same name as an existing command for your application will overwrite the old command.
   * 
   * Create a new global command. Returns `201` and an [application command](https://discordapp.com/developers/docs/interactions/application-commands#application-command-object) object.
   */
  createGlobalApplicationCommand: Route<{
    params: ["applicationId"],
    body: Discord.RESTPostAPIApplicationCommandsJSONBody,
    result: Discord.RESTPostAPIApplicationCommandsResult,
  }>,
  /**
   * ## [Get Global Application Command](https://discordapp.com/developers/docs/interactions/application-commands#get-global-application-command)
   * 
   * Fetch a global command for your application. Returns an [application command](https://discordapp.com/developers/docs/interactions/application-commands#application-command-object) object.
   */
  getGlobalApplicationCommand: Route<{
    params: ["applicationId", "commandId"],
    result: Discord.RESTGetAPIApplicationCommandResult,
  }>,
  /**
   * ## [Edit Global Application Command](https://discordapp.com/developers/docs/interactions/application-commands#edit-global-application-command)
   * 
   * All parameters for this endpoint are optional.
   * 
   * Edit a global command. Returns `200` and an [application command](https://discordapp.com/developers/docs/interactions/application-commands#application-command-object) object. All fields are optional, but any fields provided will entirely overwrite the existing values of those fields.
   */
  editGlobalApplicationCommand: Route<{
    params: ["applicationId", "commandId"],
    body: Discord.RESTPatchAPIApplicationCommandJSONBody,
    result: Discord.RESTPatchAPIApplicationCommandResult,
  }>,
  /**
   * ## [Delete Global Application Command](https://discordapp.com/developers/docs/interactions/application-commands#delete-global-application-command)
   * 
   * Deletes a global command. Returns `204 No Content` on success.
   */
  deleteGlobalApplicationCommand: Route<{
    params: ["applicationId", "commandId"],
    result: never,
  }>,
  /**
   * ## [Bulk Overwrite Global Application Commands](https://discordapp.com/developers/docs/interactions/application-commands#bulk-overwrite-global-application-commands)
   * 
   * Takes a list of application commands, overwriting the existing global command list for this application. Returns `200` and a list of [application command](https://discordapp.com/developers/docs/interactions/application-commands#application-command-object) objects. Commands that do not already exist will count toward daily application command create limits.
   * 
   * This will overwrite **all** types of application commands: slash commands, user commands, and message commands.
   */
  bulkOverwriteGlobalApplicationCommands: Route<{
    params: ["applicationId"],
    body: Discord.RESTPutAPIApplicationCommandsJSONBody,
    result: Discord.RESTPutAPIApplicationCommandsResult,
  }>,
  /**
   * ## [Get Guild Application Commands](https://discordapp.com/developers/docs/interactions/application-commands#get-guild-application-commands)
   * 
   * The objects returned by this endpoint may be augmented with [additional fields if localization is active](https://discordapp.com/developers/docs/interactions/application-commands#retrieving-localized-commands).
   * 
   * Fetch all of the guild commands for your application for a specific guild. Returns an array of [application command](#DOCS_INTERACTIONS_APPLICATION_COMMANDS/application-command-object) objects.
   */
  getGuildApplicationCommands: Route<{
    params: ["applicationId", "guildId"],
    query: { with_localizations?: boolean },
    result: Discord.RESTGetAPIApplicationGuildCommandsResult,
  }>,
  /**
   * ## [Create Guild Application Command](https://discordapp.com/developers/docs/interactions/application-commands#create-guild-application-command)
   * 
   * Creating a command with the same name as an existing command for your application will overwrite the old command.
   * 
   * Create a new guild command. New guild commands will be available in the guild immediately. Returns `201` and an [application command](https://discordapp.com/developers/docs/interactions/application-commands#application-command-object) object. If the command did not already exist, it will count toward daily application command create limits.
   */
  createGuildApplicationCommand: Route<{
    params: ["applicationId", "guildId"],
    body: Discord.RESTPostAPIApplicationGuildCommandsJSONBody,
    result: Discord.RESTPostAPIApplicationGuildCommandsResult,
  }>,
  /**
   * ## [Get Guild Application Command](https://discordapp.com/developers/docs/interactions/application-commands#get-guild-application-command)
   * 
   * Fetch a guild command for your application. Returns an [application command](https://discordapp.com/developers/docs/interactions/application-commands#application-command-object) object.
   */
  getGuildApplicationCommand: Route<{
    params: ["applicationId", "guildId", "commandId"],
    result: Discord.RESTGetAPIApplicationGuildCommandResult,
  }>,
  /**
   * ## [Edit Guild Application Command](https://discordapp.com/developers/docs/interactions/application-commands#edit-guild-application-command)
   * 
   * All parameters for this endpoint are optional.
   * 
   * Edit a guild command. Updates for guild commands will be available immediately. Returns `200` and an [application command](https://discordapp.com/developers/docs/interactions/application-commands#application-command-object) object. All fields are optional, but any fields provided will entirely overwrite the existing values of those fields.
   */
  editGuildApplicationCommand: Route<{
    params: ["applicationId", "guildId", "commandId"],
    body: Discord.RESTPatchAPIApplicationGuildCommandJSONBody,
    result: Discord.RESTPatchAPIApplicationGuildCommandResult,
  }>,
  /**
   * ## [Delete Guild Application Command](https://discordapp.com/developers/docs/interactions/application-commands#delete-guild-application-command)
   * 
   * Delete a guild command. Returns `204 No Content` on success.
   */
  deleteGuildApplicationCommand: Route<{
    params: ["applicationId", "guildId", "commandId"],
    result: never,
  }>,
  /**
   * ## [Bulk Overwrite Guild Application Commands](https://discordapp.com/developers/docs/interactions/application-commands#bulk-overwrite-guild-application-commands)
   * 
   * Takes a list of application commands, overwriting the existing command list for this application for the targeted guild. Returns `200` and a list of [application command](https://discordapp.com/developers/docs/interactions/application-commands#application-command-object) objects.
   * 
   * This will overwrite **all** types of application commands: slash commands, user commands, and message commands.
   */
  bulkOverwriteGuildApplicationCommands: Route<{
    params: ["applicationId", "guildId"],
    body: Discord.RESTPutAPIApplicationGuildCommandsJSONBody,
    result: Discord.RESTPutAPIApplicationGuildCommandsResult,
  }>,
  /**
   * ## [Get Guild Application Command Permissions](https://discordapp.com/developers/docs/interactions/application-commands#get-guild-application-command-permissions)
   * 
   * Fetches permissions for all commands for your application in a guild. Returns an array of [guild application command permissions](https://discordapp.com/developers/docs/interactions/application-commands#application-command-permissions-object-guild-application-command-permissions-structure) objects.
   */
  getGuildApplicationCommandPermissions: Route<{
    params: ["applicationId", "guildId"],
    result: Discord.RESTGetAPIGuildApplicationCommandsPermissionsResult,
  }>,
  /**
   * ## [Get Application Command Permissions](https://discordapp.com/developers/docs/interactions/application-commands#get-application-command-permissions)
   * 
   * Fetches permissions for a specific command for your application in a guild. Returns a [guild application command permissions](https://discordapp.com/developers/docs/interactions/application-commands#application-command-permissions-object-guild-application-command-permissions-structure) object.
   */
  getApplicationCommandPermissions: Route<{
    params: ["applicationId", "guildId", "commandId"],
    result: Discord.RESTGetAPIApplicationCommandPermissionsResult,
  }>,
  /**
   * ## [Edit Application Command Permissions](https://discordapp.com/developers/docs/interactions/application-commands#edit-application-command-permissions)
   * 
   * This endpoint will overwrite existing permissions for the command in that guild
   * 
   * Edits command permissions for a specific command for your application in a guild and returns a [guild application command permissions](https://discordapp.com/developers/docs/interactions/application-commands#application-command-permissions-object-guild-application-command-permissions-structure) object.
   * 
   * You can add up to 100 permission overwrites for a command.
   * 
   * This endpoint requires authentication with a Bearer token that has permission to manage the guild and its roles. For more information, read above about [application command permissions](#DOCS_INTERACTIONS_APPLICATION_COMMANDS/permissions).
   * 
   * Deleting or renaming a command will permanently delete all permissions for the command
   */
  editApplicationCommandPermissions: Route<{
    params: ["applicationId", "guildId", "commandId"],
    body: Discord.RESTPutAPIApplicationCommandPermissionsJSONBody,
    result: Discord.RESTPutAPIApplicationCommandPermissionsResult,
  }>,
  /**
   * ## [Batch Edit Application Command Permissions](https://discordapp.com/developers/docs/interactions/application-commands#batch-edit-application-command-permissions)
   * 
   * This endpoint has been disabled with [updates to command permissions (Permissions v2)](https://discordapp.com/developers/docs/change/log#updated-command-permissions). Instead, you can [edit each application command permissions](#DOCS_INTERACTIONS_APPLICATION_COMMANDS/edit-application-command-permissions) (though you should be careful to handle any potential [rate limits](#DOCS_TOPICS_RATE_LIMITS)).
   */
  batchEditApplicationCommandPermissions: Route<{
    params: ["applicationId", "guildId"],
    body: Discord.RESTPutAPIGuildApplicationCommandsPermissionsJSONBody,
    result: Discord.RESTPutAPIGuildApplicationCommandsPermissionsResult,
  }>,
}>;
export declare const ApplicationCommand: RouteGroupClass<ApplicationCommand>;


export type AuditLog = RouteGroup<{
  /**
   * ## [Get Guild Audit Log](https://discordapp.com/developers/docs/resources/audit-log#get-guild-audit-log)
   * 
   * Returns an [audit log](https://discordapp.com/developers/docs/resources/audit-log#audit-log-object) object for the guild. Requires the [`VIEW_AUDIT_LOG`](#DOCS_TOPICS_PERMISSIONS/permissions-bitwise-permission-flags) permission.
   */
  getGuildAuditLog: Route<{
    params: ["guildId"],
    query: Discord.RESTGetAPIAuditLogQuery,
    result: Discord.RESTGetAPIAuditLogResult,
  }>,
}>;
export declare const AuditLog: RouteGroupClass<AuditLog>;


export type AutoModeration = RouteGroup<{
  /**
   * ## [List Auto Moderation Rules for Guild](https://discordapp.com/developers/docs/resources/auto-moderation#list-auto-moderation-rules-for-guild)
   * 
   * Get a list of all rules currently configured for the guild. Returns a list of [auto moderation rule](https://discordapp.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object) objects for the given guild.
   * 
   * This endpoint requires the `MANAGE_GUILD` [permission](#DOCS_RESOURCES_AUTO_MODERATION/auto-moderation-permission-requirements).
   */
  listAutoModerationRulesForGuild: Route<{
    params: ["guildId"],
    result: Discord.RESTGetAPIGuildAutoModerationRulesResult,
  }>,
  /**
   * ## [Get Auto Moderation Rule](https://discordapp.com/developers/docs/resources/auto-moderation#get-auto-moderation-rule)
   * 
   * Get a single rule. Returns an [auto moderation rule](https://discordapp.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object) object.
   * 
   * This endpoint requires the `MANAGE_GUILD` [permission](#DOCS_RESOURCES_AUTO_MODERATION/auto-moderation-permission-requirements).
   */
  getAutoModerationRule: Route<{
    params: ["guildId", "autoModerationRuleId"],
    result: Discord.RESTGetAPIGuildAutoModerationRuleResult,
  }>,
  /**
   * ## [Create Auto Moderation Rule](https://discordapp.com/developers/docs/resources/auto-moderation#create-auto-moderation-rule)
   * 
   * Create a new rule. Returns an [auto moderation rule](https://discordapp.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object) on success.
   * 
   * This endpoint requires the `MANAGE_GUILD` [permission](#DOCS_RESOURCES_AUTO_MODERATION/auto-moderation-permission-requirements).
   */
  createAutoModerationRule: Route<{
    params: ["guildId"],
    body: Discord.RESTPostAPIGuildAutoModerationRulesJSONBody,
    result: Discord.RESTPostAPIGuildAutoModerationRulesResult,
    reason: true,
  }>,
  /**
   * ## [Modify Auto Moderation Rule](https://discordapp.com/developers/docs/resources/auto-moderation#modify-auto-moderation-rule)
   * 
   * Modify an existing rule. Returns an [auto moderation rule](https://discordapp.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object) on success.
   * 
   * Requires `MANAGE_GUILD` [permissions](#DOCS_RESOURCES_AUTO_MODERATION/auto-moderation-permission-requirements).
   * 
   * All parameters for this endpoint are optional.
   */
  modifyAutoModerationRule: Route<{
    params: ["guildId", "autoModerationRuleId"],
    body: Discord.RESTPatchAPIGuildAutoModerationRuleJSONBody,
    result: Discord.RESTPatchAPIGuildAutoModerationRuleResult,
    reason: true,
  }>,
  /**
   * ## [Delete Auto Moderation Rule](https://discordapp.com/developers/docs/resources/auto-moderation#delete-auto-moderation-rule)
   * 
   * Delete a rule. Returns a `204` on success.
   * 
   * This endpoint requires the `MANAGE_GUILD` [permission](https://discordapp.com/developers/docs/resources/auto-moderation#auto-moderation-permission-requirements).
   */
  deleteAutoModerationRule: Route<{
    params: ["guildId", "autoModerationRuleId"],
    result: Discord.RESTDeleteAPIGuildAutoModerationRuleResult,
    reason: true,
  }>,
}>;
export declare const AutoModeration: RouteGroupClass<AutoModeration>;


export type Channel = RouteGroup<{
  /**
   * ## [Get Channel](https://discordapp.com/developers/docs/resources/channel#get-channel)
   * 
   * Get a channel by ID. Returns a [channel](https://discordapp.com/developers/docs/resources/channel#channel-object) object.  If the channel is a thread, a [thread member](#DOCS_RESOURCES_CHANNEL/thread-member-object) object is included in the returned result.
   */
  getChannel: Route<{
    params: ["channelId"],
    result: Discord.RESTGetAPIChannelResult,
  }>,
  /**
   * ## [Modify Channel](https://discordapp.com/developers/docs/resources/channel#modify-channel)
   * 
   * Update a channel's settings. Returns a [channel](https://discordapp.com/developers/docs/resources/channel#channel-object) on success, and a 400 BAD REQUEST on invalid parameters. All JSON parameters are optional.
   */
  modifyChannel: Route<{
    params: ["channelId"],
    body: Discord.RESTPatchAPIChannelJSONBody,
    result: Discord.RESTPatchAPIChannelResult,
    reason: true,
  }>,
  /**
   * ## [Delete/Close Channel](https://discordapp.com/developers/docs/resources/channel#deleteclose-channel)
   * 
   * Delete a channel, or close a private message. Requires the `MANAGE_CHANNELS` permission for the guild, or `MANAGE_THREADS` if the channel is a thread. Deleting a category does not delete its child channels; they will have their `parent_id` removed and a [Channel Update](https://discordapp.com/developers/docs/topics/gateway#channel-update) Gateway event will fire for each of them. Returns a [channel](#DOCS_RESOURCES_CHANNEL/channel-object) object on success. Fires a [Channel Delete](#DOCS_TOPICS_GATEWAY/channel-delete) Gateway event (or [Thread Delete](#DOCS_TOPICS_GATEWAY/thread-delete) if the channel was a thread).
   * 
   * Deleting a guild channel cannot be undone. Use this with caution, as it is impossible to undo this action when performed on a guild channel. In contrast, when used with a private message, it is possible to undo the action by opening a private message with the recipient again.
   * 
   * For Community guilds, the Rules or Guidelines channel and the Community Updates channel cannot be deleted.
   */
  deleteOrCloseChannel: Route<{
    params: ["channelId"],
    result: Discord.RESTDeleteAPIChannelResult,
    reason: true,
  }>,
  /**
   * ## [Get Channel Messages](https://discordapp.com/developers/docs/resources/channel#get-channel-messages)
   * 
   * Returns the messages for a channel. If operating on a guild channel, this endpoint requires the `VIEW_CHANNEL` permission to be present on the current user. If the current user is missing the `READ_MESSAGE_HISTORY` permission in the channel then this will return no messages (since they cannot read the message history). Returns an array of [message](https://discordapp.com/developers/docs/resources/channel#message-object) objects on success.
   * 
   * The `before`, `after`, and `around` parameters are mutually exclusive, only one may be passed at a time.
   */
  getChannelMessages: Route<{
    params: ["channelId"],
    query: Discord.RESTGetAPIChannelMessagesQuery,
    result: Discord.RESTGetAPIChannelMessagesResult,
  }>,
  /**
   * ## [Get Channel Message](https://discordapp.com/developers/docs/resources/channel#get-channel-message)
   * 
   * Returns a specific message in the channel. If operating on a guild channel, this endpoint requires the `READ_MESSAGE_HISTORY` permission to be present on the current user. Returns a [message](https://discordapp.com/developers/docs/resources/channel#message-object) object on success.
   */
  getChannelMessage: Route<{
    params: ["channelId", "messageId"],
    result: Discord.RESTGetAPIChannelMessageResult,
  }>,
  /**
   * ## [Create Message](https://discordapp.com/developers/docs/resources/channel#create-message)
   * 
   * Discord may strip certain characters from message content, like invalid unicode characters or characters which cause unexpected message formatting. If you are passing user-generated strings into message content, consider sanitizing the data to prevent unexpected behavior and utilizing `allowed_mentions` to prevent unexpected mentions.
   * 
   * Post a message to a guild text or DM channel. Returns a [message](https://discordapp.com/developers/docs/resources/channel#message-object) object. Fires a [Message Create](#DOCS_TOPICS_GATEWAY/message-create) Gateway event. See [message formatting](#DOCS_REFERENCE/message-formatting) for more information on how to properly format messages.
   * 
   * To create a message as a reply to another message, apps can include a [`message_reference`](#DOCS_RESOURCES_CHANNEL/message-reference-object-message-reference-structure) with a `message_id`. The `channel_id` and `guild_id` in the `message_reference` are optional, but will be validated if provided.
   * 
   * Files must be attached using a `multipart/form-data` body as described in [Uploading Files](#DOCS_REFERENCE/uploading-files).
   */
  createMessage: Route<{
    params: ["channelId"],
    body: Discord.RESTPostAPIChannelMessageJSONBody,
    result: Discord.RESTPostAPIChannelMessageResult,
    file: true,
  }>,
  /**
   * ## [Crosspost Message](https://discordapp.com/developers/docs/resources/channel#crosspost-message)
   * 
   * Crosspost a message in a News Channel to following channels. This endpoint requires the `SEND_MESSAGES` permission, if the current user sent the message, or additionally the `MANAGE_MESSAGES` permission, for all other messages, to be present for the current user.
   * 
   * Returns a [message](https://discordapp.com/developers/docs/resources/channel#message-object) object.
   */
  crosspostMessage: Route<{
    params: ["channelId", "messageId"],
    result: Discord.RESTPostAPIChannelMessageCrosspostResult,
  }>,
  /**
   * ## [Create Reaction](https://discordapp.com/developers/docs/resources/channel#create-reaction)
   * 
   * Create a reaction for the message. This endpoint requires the `READ_MESSAGE_HISTORY` permission to be present on the current user. Additionally, if nobody else has reacted to the message using this emoji, this endpoint requires the `ADD_REACTIONS` permission to be present on the current user. Returns a 204 empty response on success.
   * The `emoji` must be [URL Encoded](https://en.wikipedia.org/wiki/Percent-encoding) or the request will fail with `10014: Unknown Emoji`. To use custom emoji, you must encode it in the format `name:id` with the emoji name and emoji id.
   */
  createReaction: Route<{
    params: ["channelId", "messageId", "emoji"],
    result: Discord.RESTPutAPIChannelMessageReactionResult,
  }>,
  /**
   * ## [Delete Own Reaction](https://discordapp.com/developers/docs/resources/channel#delete-own-reaction)
   * 
   * Delete a reaction the current user has made for the message. Returns a 204 empty response on success.
   * The `emoji` must be [URL Encoded](https://en.wikipedia.org/wiki/Percent-encoding) or the request will fail with `10014: Unknown Emoji`. To use custom emoji, you must encode it in the format `name:id` with the emoji name and emoji id.
   */
  deleteOwnReaction: Route<{
    params: ["channelId", "messageId", "emoji"],
    result: Discord.RESTDeleteAPIChannelMessageReactionResult,
  }>,
  /**
   * ## [Delete User Reaction](https://discordapp.com/developers/docs/resources/channel#delete-user-reaction)
   * 
   * Deletes another user's reaction. This endpoint requires the `MANAGE_MESSAGES` permission to be present on the current user. Returns a 204 empty response on success.
   * The `emoji` must be [URL Encoded](https://en.wikipedia.org/wiki/Percent-encoding) or the request will fail with `10014: Unknown Emoji`. To use custom emoji, you must encode it in the format `name:id` with the emoji name and emoji id.
   */
  deleteUserReaction: Route<{
    params: ["channelId", "messageId", "emoji", "userId"],
    result: Discord.RESTDeleteAPIChannelMessageReactionResult,
  }>,
  /**
   * ## [Get Reactions](https://discordapp.com/developers/docs/resources/channel#get-reactions)
   * 
   * Get a list of users that reacted with this emoji. Returns an array of [user](https://discordapp.com/developers/docs/resources/user#user-object) objects on success.
   * The `emoji` must be [URL Encoded](https://en.wikipedia.org/wiki/Percent-encoding) or the request will fail with `10014: Unknown Emoji`. To use custom emoji, you must encode it in the format `name:id` with the emoji name and emoji id.
   */
  getReactions: Route<{
    params: ["channelId", "messageId", "emoji"],
    query: Discord.RESTGetAPIChannelMessageReactionUsersQuery,
    result: Discord.RESTGetAPIChannelMessageReactionUsersResult,
  }>,
  /**
   * ## [Delete All Reactions](https://discordapp.com/developers/docs/resources/channel#delete-all-reactions)
   * 
   * Deletes all reactions on a message. This endpoint requires the `MANAGE_MESSAGES` permission to be present on the current user. Fires a [Message Reaction Remove All](https://discordapp.com/developers/docs/topics/gateway#message-reaction-remove-all) Gateway event.
   */
  deleteAllReactions: Route<{
    params: ["channelId", "messageId"],
    result: Discord.RESTDeleteAPIChannelAllMessageReactionsResult,
  }>,
  /**
   * ## [Delete All Reactions for Emoji](https://discordapp.com/developers/docs/resources/channel#delete-all-reactions-for-emoji)
   * 
   * Deletes all the reactions for a given emoji on a message. This endpoint requires the `MANAGE_MESSAGES` permission to be present on the current user. Fires a [Message Reaction Remove Emoji](https://discordapp.com/developers/docs/topics/gateway#message-reaction-remove-emoji) Gateway event.
   * The `emoji` must be [URL Encoded](https://en.wikipedia.org/wiki/Percent-encoding) or the request will fail with `10014: Unknown Emoji`. To use custom emoji, you must encode it in the format `name:id` with the emoji name and emoji id.
   */
  deleteAllReactionsForEmoji: Route<{
    params: ["channelId", "messageId", "emoji"],
    result: Discord.RESTDeleteAPIChannelMessageReactionResult,
  }>,
  /**
   * ## [Edit Message](https://discordapp.com/developers/docs/resources/channel#edit-message)
   * 
   * Edit a previously sent message. The fields `content`, `embeds`, and `flags` can be edited by the original message author. Other users can only edit `flags` and only if they have the `MANAGE_MESSAGES` permission in the corresponding channel. When specifying flags, ensure to include all previously set flags/bits in addition to ones that you are modifying. Only `flags` documented in the table below may be modified by users (unsupported flag changes are currently ignored without error).
   * 
   * When the `content` field is edited, the `mentions` array in the message object will be reconstructed from scratch based on the new content. The `allowed_mentions` field of the edit request controls how this happens. If there is no explicit `allowed_mentions` in the edit request, the content will be parsed with _default_ allowances, that is, without regard to whether or not an `allowed_mentions` was present in the request that originally created the message.
   * 
   * Returns a [message](https://discordapp.com/developers/docs/resources/channel#message-object) object. Fires a [Message Update](#DOCS_TOPICS_GATEWAY/message-update) Gateway event.
   * 
   * Refer to [Uploading Files](#DOCS_REFERENCE/uploading-files) for details on attachments and `multipart/form-data` requests.
   * Any provided files will be **appended** to the message. To remove or replace files you will have to supply the `attachments` field which specifies the files to retain on the message after edit.
   * 
   * Starting with API v10, the `attachments` array must contain all attachments that should be present after edit, including **retained and new** attachments provided in the request body.
   * 
   * All parameters to this endpoint are optional and nullable.
   */
  editMessage: Route<{
    params: ["channelId", "messageId"],
    body: Discord.RESTPatchAPIChannelMessageJSONBody,
    result: Discord.RESTPatchAPIChannelMessageResult,
    file: true,
  }>,
  /**
   * ## [Delete Message](https://discordapp.com/developers/docs/resources/channel#delete-message)
   * 
   * Delete a message. If operating on a guild channel and trying to delete a message that was not sent by the current user, this endpoint requires the `MANAGE_MESSAGES` permission. Returns a 204 empty response on success. Fires a [Message Delete](https://discordapp.com/developers/docs/topics/gateway#message-delete) Gateway event.
   */
  deleteMessage: Route<{
    params: ["channelId", "messageId"],
    result: Discord.RESTDeleteAPIChannelMessageResult,
    reason: true,
  }>,
  /**
   * ## [Bulk Delete Messages](https://discordapp.com/developers/docs/resources/channel#bulk-delete-messages)
   * 
   * Delete multiple messages in a single request. This endpoint can only be used on guild channels and requires the `MANAGE_MESSAGES` permission. Returns a 204 empty response on success. Fires a [Message Delete Bulk](https://discordapp.com/developers/docs/topics/gateway#message-delete-bulk) Gateway event.
   * 
   * Any message IDs given that do not exist or are invalid will count towards the minimum and maximum message count (currently 2 and 100 respectively).
   * 
   * This endpoint will not delete messages older than 2 weeks, and will fail with a 400 BAD REQUEST if any message provided is older than that or if any duplicate message IDs are provided.
   */
  bulkDeleteMessages: Route<{
    params: ["channelId"],
    body: Discord.RESTPostAPIChannelMessagesBulkDeleteJSONBody,
    result: Discord.RESTPostAPIChannelMessagesBulkDeleteResult,
    reason: true,
  }>,
  /**
   * ## [Edit Channel Permissions](https://discordapp.com/developers/docs/resources/channel#edit-channel-permissions)
   * 
   * Edit the channel permission overwrites for a user or role in a channel. Only usable for guild channels. Requires the `MANAGE_ROLES` permission. Only permissions your bot has in the guild or parent channel (if applicable) can be allowed/denied (unless your bot has a `MANAGE_ROLES` overwrite in the channel). Returns a 204 empty response on success. For more information about permissions, see [permissions](https://discordapp.com/developers/docs/topics/permissions#permissions).
   */
  editChannelPermissions: Route<{
    params: ["channelId", "overwriteId"],
    body: Discord.RESTPutAPIChannelPermissionJSONBody,
    result: Discord.RESTPutAPIChannelPermissionResult,
    reason: true,
  }>,
  /**
   * ## [Get Channel Invites](https://discordapp.com/developers/docs/resources/channel#get-channel-invites)
   * 
   * Returns a list of [invite](https://discordapp.com/developers/docs/resources/invite#invite-object) objects (with [invite metadata](#DOCS_RESOURCES_INVITE/invite-metadata-object)) for the channel. Only usable for guild channels. Requires the `MANAGE_CHANNELS` permission.
   */
  getChannelInvites: Route<{
    params: ["channelId"],
    result: Discord.RESTGetAPIChannelInvitesResult,
  }>,
  /**
   * ## [Create Channel Invite](https://discordapp.com/developers/docs/resources/channel#create-channel-invite)
   * 
   * Create a new [invite](https://discordapp.com/developers/docs/resources/invite#invite-object) object for the channel. Only usable for guild channels. Requires the `CREATE_INSTANT_INVITE` permission. All JSON parameters for this route are optional, however the request body is not. If you are not sending any fields, you still have to send an empty JSON object (`{}`). Returns an [invite](#DOCS_RESOURCES_INVITE/invite-object) object. Fires an [Invite Create](#DOCS_TOPICS_GATEWAY/invite-create) Gateway event.
   */
  createChannelInvite: Route<{
    params: ["channelId"],
    body: Discord.RESTPostAPIChannelInviteJSONBody,
    result: Discord.RESTPostAPIChannelInviteResult,
    reason: true,
  }>,
  /**
   * ## [Delete Channel Permission](https://discordapp.com/developers/docs/resources/channel#delete-channel-permission)
   * 
   * Delete a channel permission overwrite for a user or role in a channel. Only usable for guild channels. Requires the `MANAGE_ROLES` permission. Returns a 204 empty response on success. For more information about permissions, see [permissions](https://discordapp.com/developers/docs/topics/permissions#permissions)
   */
  deleteChannelPermission: Route<{
    params: ["channelId", "overwriteId"],
    result: Discord.RESTDeleteAPIChannelPermissionResult,
    reason: true,
  }>,
  /**
   * ## [Follow News Channel](https://discordapp.com/developers/docs/resources/channel#follow-news-channel)
   * 
   * Follow a News Channel to send messages to a target channel. Requires the `MANAGE_WEBHOOKS` permission in the target channel. Returns a [followed channel](https://discordapp.com/developers/docs/resources/channel#followed-channel-object) object.
   */
  followNewsChannel: Route<{
    params: ["channelId"],
    body: Discord.RESTPostAPIChannelFollowersJSONBody,
    result: Discord.RESTPostAPIChannelFollowersResult,
  }>,
  /**
   * ## [Trigger Typing Indicator](https://discordapp.com/developers/docs/resources/channel#trigger-typing-indicator)
   * 
   * Post a typing indicator for the specified channel. Generally bots should **not** implement this route. However, if a bot is responding to a command and expects the computation to take a few seconds, this endpoint may be called to let the user know that the bot is processing their message. Returns a 204 empty response on success. Fires a [Typing Start](https://discordapp.com/developers/docs/topics/gateway#typing-start) Gateway event.
   */
  triggerTypingIndicator: Route<{
    params: ["channelId"],
    result: Discord.RESTPostAPIChannelTypingResult,
  }>,
  /**
   * ## [Get Pinned Messages](https://discordapp.com/developers/docs/resources/channel#get-pinned-messages)
   * 
   * Returns all pinned messages in the channel as an array of [message](https://discordapp.com/developers/docs/resources/channel#message-object) objects.
   */
  getPinnedMessages: Route<{
    params: ["channelId"],
    result: Discord.RESTGetAPIChannelPinsResult,
  }>,
  /**
   * ## [Pin Message](https://discordapp.com/developers/docs/resources/channel#pin-message)
   * 
   * Pin a message in a channel. Requires the `MANAGE_MESSAGES` permission. Returns a 204 empty response on success.
   * 
   * The max pinned messages is 50.
   */
  pinMessage: Route<{
    params: ["channelId", "messageId"],
    result: Discord.RESTPutAPIChannelPinResult,
    reason: true,
  }>,
  /**
   * ## [Unpin Message](https://discordapp.com/developers/docs/resources/channel#unpin-message)
   * 
   * Unpin a message in a channel. Requires the `MANAGE_MESSAGES` permission. Returns a 204 empty response on success.
   */
  unpinMessage: Route<{
    params: ["channelId", "messageId"],
    result: Discord.RESTDeleteAPIChannelPinResult,
    reason: true,
  }>,
  /**
   * ## [Group DM Add Recipient](https://discordapp.com/developers/docs/resources/channel#group-dm-add-recipient)
   * 
   * Adds a recipient to a Group DM using their access token.
   */
  groupDMAddRecipient: Route<{
    params: ["channelId", "userId"],
    body: Discord.RESTPutAPIChannelRecipientJSONBody,
    result: Discord.RESTPutAPIChannelRecipientResult,
  }>,
  /**
   * ## [Group DM Remove Recipient](https://discordapp.com/developers/docs/resources/channel#group-dm-remove-recipient)
   * 
   * Removes a recipient from a Group DM.
   */
  groupDMRemoveRecipient: Route<{
    params: ["channelId", "userId"],
    result: Discord.RESTDeleteAPIChannelRecipientResult,
  }>,
  /**
   * ## [Start Thread from Message](https://discordapp.com/developers/docs/resources/channel#start-thread-from-message)
   * 
   * Creates a new thread from an existing message. Returns a [channel](https://discordapp.com/developers/docs/resources/channel#channel-object) on success, and a 400 BAD REQUEST on invalid parameters. Fires a [Thread Create](#DOCS_TOPICS_GATEWAY/thread-create) Gateway event.
   * 
   * When called on a `GUILD_TEXT` channel, creates a `GUILD_PUBLIC_THREAD`. When called on a `GUILD_NEWS` channel, creates a `GUILD_NEWS_THREAD`. Does not work on a [`GUILD_FORUM`](#DOCS_RESOURCES_CHANNEL/start-thread-in-forum-channel) channel. The id of the created thread will be the same as the id of the source message, and as such a message can only have a single thread created from it.
   */
  startThreadFromMessage: Route<{
    params: ["channelId", "messageId"],
    body: Discord.RESTPostAPIChannelMessagesThreadsJSONBody,
    result: Discord.RESTPostAPIChannelMessagesThreadsResult,
    reason: true,
  }>,
  /**
   * ## [Start Thread without Message](https://discordapp.com/developers/docs/resources/channel#start-thread-without-message)
   * 
   * Creates a new thread that is not connected to an existing message. Returns a [channel](https://discordapp.com/developers/docs/resources/channel#channel-object) on success, and a 400 BAD REQUEST on invalid parameters. Fires a [Thread Create](#DOCS_TOPICS_GATEWAY/thread-create) Gateway event.
   * 
   * Creating a private thread requires the server to be boosted. The [guild features](#DOCS_RESOURCES_GUILD/guild-object-guild-features) will indicate if that is possible for the guild.
   */
  startThreadWithoutMessage: Route<{
    params: ["channelId"],
    body: Discord.RESTPostAPIChannelThreadsJSONBody,
    result: Discord.RESTPostAPIChannelThreadsResult,
    reason: true,
  }>,
  /**
   * ## [Start Thread in Forum Channel](https://discordapp.com/developers/docs/resources/channel#start-thread-in-forum-channel)
   * 
   * Creates a new thread in a forum channel, and sends a message within the created thread. Returns a [channel](https://discordapp.com/developers/docs/resources/channel#channel-object), with a nested [message](#DOCS_RESOURCES_CHANNEL/message-object) object, on success, and a 400 BAD REQUEST on invalid parameters. Fires a [Thread Create](#DOCS_TOPICS_GATEWAY/thread-create) and [Message Create](#DOCS_TOPICS_GATEWAY/message-create) Gateway event.
   * 
   * - The type of the created thread is `GUILD_PUBLIC_THREAD`.
   * - See [message formatting](#DOCS_REFERENCE/message-formatting) for more information on how to properly format messages.
   * - The current user must have the `SEND_MESSAGES` permission (`CREATE_PUBLIC_THREADS` is ignored).
   * - The maximum request size when sending a message is **8MiB**.
   * - For the embed object, you can set every field except `type` (it will be `rich` regardless of if you try to set it), `provider`, `video`, and any `height`, `width`, or `proxy_url` values for images.
   * - Examples for file uploads are available in [Uploading Files](#DOCS_REFERENCE/uploading-files).
   * - Files must be attached using a `multipart/form-data` body as described in [Uploading Files](#DOCS_REFERENCE/uploading-files).
   * - Note that when sending a message, you must provide a value for at **least one of** `content`, `embeds`, or `files[n]`.
   * 
   * Discord may strip certain characters from message content, like invalid unicode characters or characters which cause unexpected message formatting. If you are passing user-generated strings into message content, consider sanitizing the data to prevent unexpected behavior and utilizing `allowed_mentions` to prevent unexpected mentions.
   */
  startThreadInForumChannel: Route<{
    params: ["channelId"],
    body: Discord.RESTPostAPIChannelThreadsJSONBody,
    result: Discord.RESTPostAPIChannelThreadsResult,
    file: true,
    reason: true,
  }>,
  /**
   * ## [Join Thread](https://discordapp.com/developers/docs/resources/channel#join-thread)
   * 
   * Adds the current user to a thread. Also requires the thread is not archived. Returns a 204 empty response on success. Fires a [Thread Members Update](https://discordapp.com/developers/docs/topics/gateway#thread-members-update) Gateway event.
   */
  joinThread: Route<{
    params: ["channelId"],
    result: Discord.RESTPutAPIChannelThreadMembersResult,
  }>,
  /**
   * ## [Add Thread Member](https://discordapp.com/developers/docs/resources/channel#add-thread-member)
   * 
   * Adds another member to a thread. Requires the ability to send messages in the thread. Also requires the thread is not archived. Returns a 204 empty response if the member is successfully added or was already a member of the thread. Fires a [Thread Members Update](https://discordapp.com/developers/docs/topics/gateway#thread-members-update) Gateway event.
   */
  addThreadMember: Route<{
    params: ["channelId", "userId"],
    result: Discord.RESTPutAPIChannelThreadMembersResult,
  }>,
  /**
   * ## [Leave Thread](https://discordapp.com/developers/docs/resources/channel#leave-thread)
   * 
   * Removes the current user from a thread. Also requires the thread is not archived. Returns a 204 empty response on success. Fires a [Thread Members Update](https://discordapp.com/developers/docs/topics/gateway#thread-members-update) Gateway event.
   */
  leaveThread: Route<{
    params: ["channelId"],
    result: Discord.RESTDeleteAPIChannelThreadMembersResult,
  }>,
  /**
   * ## [Remove Thread Member](https://discordapp.com/developers/docs/resources/channel#remove-thread-member)
   * 
   * Removes another member from a thread. Requires the `MANAGE_THREADS` permission, or the creator of the thread if it is a `GUILD_PRIVATE_THREAD`. Also requires the thread is not archived. Returns a 204 empty response on success. Fires a [Thread Members Update](https://discordapp.com/developers/docs/topics/gateway#thread-members-update) Gateway event.
   */
  removeThreadMember: Route<{
    params: ["channelId", "userId"],
    result: Discord.RESTDeleteAPIChannelThreadMembersResult,
  }>,
  /**
   * ## [Get Thread Member](https://discordapp.com/developers/docs/resources/channel#get-thread-member)
   * 
   * Returns a [thread member](https://discordapp.com/developers/docs/resources/channel#thread-member-object) object for the specified user if they are a member of the thread, returns a 404 response otherwise.
   */
  getThreadMember: Route<{
    params: ["channelId", "userId"],
    result: Discord.RESTGetAPIChannelThreadMembersResult,
  }>,
  /**
   * ## [List Thread Members](https://discordapp.com/developers/docs/resources/channel#list-thread-members)
   * 
   * Returns array of [thread members](https://discordapp.com/developers/docs/resources/channel#thread-member-object) objects that are members of the thread.
   * 
   * This endpoint is restricted according to whether the `GUILD_MEMBERS` [Privileged Intent](#DOCS_TOPICS_GATEWAY/privileged-intents) is enabled for your application.
   */
  listThreadMembers: Route<{
    params: ["channelId"],
    result: Discord.RESTGetAPIChannelThreadMembersResult,
  }>,
  /**
   * ## [List Public Archived Threads](https://discordapp.com/developers/docs/resources/channel#list-public-archived-threads)
   * 
   * Returns archived threads in the channel that are public. When called on a `GUILD_TEXT` channel, returns threads of [type](https://discordapp.com/developers/docs/resources/channel#channel-object-channel-types) `GUILD_PUBLIC_THREAD`. When called on a `GUILD_NEWS` channel returns threads of [type](#DOCS_RESOURCES_CHANNEL/channel-object-channel-types) `GUILD_NEWS_THREAD`. Threads are ordered by `archive_timestamp`, in descending order. Requires the `READ_MESSAGE_HISTORY` permission.
   */
  listPublicArchivedThreads: Route<{
    params: ["channelId"],
    query: Discord.RESTGetAPIChannelThreadsArchivedPublicQuery,
    result: Discord.RESTGetAPIChannelThreadsArchivedPublicResult,
  }>,
  /**
   * ## [List Private Archived Threads](https://discordapp.com/developers/docs/resources/channel#list-private-archived-threads)
   * 
   * Returns archived threads in the channel that are of [type](https://discordapp.com/developers/docs/resources/channel#channel-object-channel-types) `GUILD_PRIVATE_THREAD`. Threads are ordered by `archive_timestamp`, in descending order. Requires both the `READ_MESSAGE_HISTORY` and `MANAGE_THREADS` permissions.
   */
  listPrivateArchivedThreads: Route<{
    params: ["channelId"],
    query: Discord.RESTGetAPIChannelThreadsArchivedPrivateQuery,
    result: Discord.RESTGetAPIChannelThreadsArchivedPrivateResult,
  }>,
  /**
   * ## [List Joined Private Archived Threads](https://discordapp.com/developers/docs/resources/channel#list-joined-private-archived-threads)
   * 
   * Returns archived threads in the channel that are of [type](https://discordapp.com/developers/docs/resources/channel#channel-object-channel-types) `GUILD_PRIVATE_THREAD`, and the user has joined. Threads are ordered by their `id`, in descending order. Requires the `READ_MESSAGE_HISTORY` permission.
   */
  listJoinedPrivateArchivedThreads: Route<{
    params: ["channelId"],
    query: { limit?: number; before?: string; },
    result: Discord.RESTGetAPIChannelUsersThreadsArchivedResult,
  }>,
}>;
export declare const Channel: RouteGroupClass<Channel>;


export type Emoji = RouteGroup<{
  /**
   * ## [List Guild Emojis](https://discordapp.com/developers/docs/resources/emoji#list-guild-emojis)
   * 
   * Returns a list of [emoji](https://discordapp.com/developers/docs/resources/emoji#emoji-object) objects for the given guild.
   */
  listGuildEmojis: Route<{
    params: ["guildId"],
    result: Discord.RESTGetAPIGuildEmojisResult,
  }>,
  /**
   * ## [Get Guild Emoji](https://discordapp.com/developers/docs/resources/emoji#get-guild-emoji)
   * 
   * Returns an [emoji](https://discordapp.com/developers/docs/resources/emoji#emoji-object) object for the given guild and emoji IDs.
   */
  getGuildEmoji: Route<{
    params: ["guildId", "emojiId"],
    result: Discord.RESTGetAPIGuildEmojiResult,
  }>,
  /**
   * ## [Create Guild Emoji](https://discordapp.com/developers/docs/resources/emoji#create-guild-emoji)
   * 
   * Create a new emoji for the guild. Requires the `MANAGE_EMOJIS_AND_STICKERS` permission. Returns the new [emoji](https://discordapp.com/developers/docs/resources/emoji#emoji-object) object on success. Fires a [Guild Emojis Update](#DOCS_TOPICS_GATEWAY/guild-emojis-update) Gateway event.
   * 
   * Emojis and animated emojis have a maximum file size of 256kb. Attempting to upload an emoji larger than this limit will fail and return 400 Bad Request and an error message, but not a [JSON status code](#DOCS_TOPICS_OPCODES_AND_STATUS_CODES/json).
   */
  createGuildEmoji: Route<{
    params: ["guildId"],
    body: Discord.RESTPostAPIGuildEmojiJSONBody,
    result: Discord.RESTPostAPIGuildEmojiResult,
    reason: true,
  }>,
  /**
   * ## [Modify Guild Emoji](https://discordapp.com/developers/docs/resources/emoji#modify-guild-emoji)
   * 
   * Modify the given emoji. Requires the `MANAGE_EMOJIS_AND_STICKERS` permission. Returns the updated [emoji](https://discordapp.com/developers/docs/resources/emoji#emoji-object) object on success. Fires a [Guild Emojis Update](#DOCS_TOPICS_GATEWAY/guild-emojis-update) Gateway event.
   * 
   * All parameters to this endpoint are optional.
   */
  modifyGuildEmoji: Route<{
    params: ["guildId", "emojiId"],
    body: Discord.RESTPatchAPIGuildEmojiJSONBody,
    result: Discord.RESTPatchAPIGuildEmojiResult,
    reason: true,
  }>,
  /**
   * ## [Delete Guild Emoji](https://discordapp.com/developers/docs/resources/emoji#delete-guild-emoji)
   * 
   * Delete the given emoji. Requires the `MANAGE_EMOJIS_AND_STICKERS` permission. Returns `204 No Content` on success. Fires a [Guild Emojis Update](https://discordapp.com/developers/docs/topics/gateway#guild-emojis-update) Gateway event.
   */
  deleteGuildEmoji: Route<{
    params: ["guildId", "emojiId"],
    result: never,
    reason: true,
  }>,
}>;
export declare const Emoji: RouteGroupClass<Emoji>;


export type Gateway = RouteGroup<{
  /**
   * ## [Get Gateway](https://discordapp.com/developers/docs/topics/gateway#get-gateway)
   * 
   * This endpoint does not require authentication.
   * 
   * Returns an object with a single valid WSS URL, which the client can use for [Connecting](https://discordapp.com/developers/docs/topics/gateway#connecting). Clients **should** cache this value and only call this endpoint to retrieve a new URL if they are unable to properly establish a connection using the cached version of the URL.
   */
  getGateway: Route<{
    result: Discord.RESTGetAPIGatewayResult,
  }>,
  /**
   * ## [Get Gateway Bot](https://discordapp.com/developers/docs/topics/gateway#get-gateway-bot)
   * 
   * This endpoint requires authentication using a valid bot token.
   * 
   * Returns an object based on the information in [Get Gateway](https://discordapp.com/developers/docs/topics/gateway#get-gateway), plus additional metadata that can help during the operation of large or [sharded](#DOCS_TOPICS_GATEWAY/sharding) bots. Unlike the [Get Gateway](#DOCS_TOPICS_GATEWAY/get-gateway), this route should not be cached for extended periods of time as the value is not guaranteed to be the same per-call, and changes as the bot joins/leaves guilds.
   */
  getGatewayBot: Route<{
    result: Discord.RESTGetAPIGatewayBotResult,
  }>,
}>;
export declare const Gateway: RouteGroupClass<Gateway>;


export type Guild = RouteGroup<{
  /**
   * ## [Create Guild](https://discordapp.com/developers/docs/resources/guild#create-guild)
   * 
   * Create a new guild. Returns a [guild](https://discordapp.com/developers/docs/resources/guild#guild-object) object on success. Fires a [Guild Create](#DOCS_TOPICS_GATEWAY/guild-create) Gateway event.
   * 
   * This endpoint can be used only by bots in less than 10 guilds.
   */
  createGuild: Route<{
    body: Discord.RESTPostAPIGuildsJSONBody,
    result: Discord.RESTPostAPIGuildsResult,
  }>,
  /**
   * ## [Get Guild](https://discordapp.com/developers/docs/resources/guild#get-guild)
   * 
   * Returns the [guild](https://discordapp.com/developers/docs/resources/guild#guild-object) object for the given id. If `with_counts` is set to `true`, this endpoint will also return `approximate_member_count` and `approximate_presence_count` for the guild.
   */
  getGuild: Route<{
    params: ["guildId"],
    query: Discord.RESTGetAPIGuildQuery,
    result: Discord.RESTGetAPIGuildResult,
  }>,
  /**
   * ## [Get Guild Preview](https://discordapp.com/developers/docs/resources/guild#get-guild-preview)
   * 
   * Returns the [guild preview](https://discordapp.com/developers/docs/resources/guild#guild-preview-object) object for the given id. If the user is not in the guild, then the guild must be lurkable.
   */
  getGuildPreview: Route<{
    params: ["guildId"],
    result: Discord.RESTGetAPIGuildPreviewResult,
  }>,
  /**
   * ## [Modify Guild](https://discordapp.com/developers/docs/resources/guild#modify-guild)
   * 
   * Modify a guild's settings. Requires the `MANAGE_GUILD` permission. Returns the updated [guild](https://discordapp.com/developers/docs/resources/guild#guild-object) object on success. Fires a [Guild Update](#DOCS_TOPICS_GATEWAY/guild-update) Gateway event.
   * 
   * All parameters to this endpoint are optional
   * 
   * Attempting to add or remove the `COMMUNITY` [guild feature](#DOCS_RESOURCES_GUILD/guild-object-guild-features) requires the `ADMINISTRATOR` permission.
   */
  modifyGuild: Route<{
    params: ["guildId"],
    body: Discord.RESTPatchAPIGuildJSONBody,
    result: Discord.RESTPatchAPIGuildResult,
    reason: true,
  }>,
  /**
   * ## [Delete Guild](https://discordapp.com/developers/docs/resources/guild#delete-guild)
   * 
   * Delete a guild permanently. User must be owner. Returns `204 No Content` on success. Fires a [Guild Delete](https://discordapp.com/developers/docs/topics/gateway#guild-delete) Gateway event.
   */
  deleteGuild: Route<{
    params: ["guildId"],
    result: never,
  }>,
  /**
   * ## [Get Guild Channels](https://discordapp.com/developers/docs/resources/guild#get-guild-channels)
   * 
   * Returns a list of guild [channel](https://discordapp.com/developers/docs/resources/channel#channel-object) objects. Does not include threads.
   */
  getGuildChannels: Route<{
    params: ["guildId"],
    result: Discord.RESTGetAPIGuildChannelsResult,
  }>,
  /**
   * ## [Create Guild Channel](https://discordapp.com/developers/docs/resources/guild#create-guild-channel)
   * 
   * Create a new [channel](https://discordapp.com/developers/docs/resources/channel#channel-object) object for the guild. Requires the `MANAGE_CHANNELS` permission. If setting permission overwrites, only permissions your bot has in the guild can be allowed/denied. Setting `MANAGE_ROLES` permission in channels is only possible for guild administrators. Returns the new [channel](#DOCS_RESOURCES_CHANNEL/channel-object) object on success. Fires a [Channel Create](#DOCS_TOPICS_GATEWAY/channel-create) Gateway event.
   * 
   * All parameters to this endpoint are optional and nullable excluding `name`
   */
  createGuildChannel: Route<{
    params: ["guildId"],
    body: Discord.RESTPostAPIGuildChannelJSONBody,
    result: Discord.RESTPostAPIGuildChannelResult,
    reason: true,
  }>,
  /**
   * ## [Modify Guild Channel Positions](https://discordapp.com/developers/docs/resources/guild#modify-guild-channel-positions)
   * 
   * Modify the positions of a set of [channel](https://discordapp.com/developers/docs/resources/channel#channel-object) objects for the guild. Requires `MANAGE_CHANNELS` permission. Returns a 204 empty response on success. Fires multiple [Channel Update](#DOCS_TOPICS_GATEWAY/channel-update) Gateway events.
   * 
   * Only channels to be modified are required.
   */
  modifyGuildChannelPositions: Route<{
    params: ["guildId"],
    body: Discord.RESTPatchAPIGuildChannelPositionsJSONBody,
    result: Discord.RESTPatchAPIGuildChannelPositionsResult,
  }>,
  /**
   * ## [List Active Guild Threads](https://discordapp.com/developers/docs/resources/guild#list-active-guild-threads)
   * 
   * Returns all active threads in the guild, including public and private threads. Threads are ordered by their `id`, in descending order.
   */
  listActiveGuildThreads: Route<{
    params: ["guildId"],
    result: Discord.RESTGetAPIGuildThreadsResult,
  }>,
  /**
   * ## [Get Guild Member](https://discordapp.com/developers/docs/resources/guild#get-guild-member)
   * 
   * Returns a [guild member](https://discordapp.com/developers/docs/resources/guild#guild-member-object) object for the specified user.
   */
  getGuildMember: Route<{
    params: ["guildId", "userId"],
    result: Discord.RESTGetAPIGuildMemberResult,
  }>,
  /**
   * ## [List Guild Members](https://discordapp.com/developers/docs/resources/guild#list-guild-members)
   * 
   * Returns a list of [guild member](https://discordapp.com/developers/docs/resources/guild#guild-member-object) objects that are members of the guild.
   * 
   * This endpoint is restricted according to whether the `GUILD_MEMBERS` [Privileged Intent](#DOCS_TOPICS_GATEWAY/privileged-intents) is enabled for your application.
   * 
   * All parameters to this endpoint are optional
   */
  listGuildMembers: Route<{
    params: ["guildId"],
    query: Discord.RESTGetAPIGuildMembersQuery,
    result: Discord.RESTGetAPIGuildMembersResult,
  }>,
  /**
   * ## [Search Guild Members](https://discordapp.com/developers/docs/resources/guild#search-guild-members)
   * 
   * Returns a list of [guild member](https://discordapp.com/developers/docs/resources/guild#guild-member-object) objects whose username or nickname starts with a provided string.
   * 
   * All parameters to this endpoint except for `query` are optional
   */
  searchGuildMembers: Route<{
    params: ["guildId"],
    query: Discord.RESTGetAPIGuildMembersSearchQuery,
    result: Discord.RESTGetAPIGuildMembersSearchResult,
  }>,
  /**
   * ## [Add Guild Member](https://discordapp.com/developers/docs/resources/guild#add-guild-member)
   * 
   * Adds a user to the guild, provided you have a valid oauth2 access token for the user with the `guilds.join` scope. Returns a 201 Created with the [guild member](https://discordapp.com/developers/docs/resources/guild#guild-member-object) as the body, or 204 No Content if the user is already a member of the guild. Fires a [Guild Member Add](#DOCS_TOPICS_GATEWAY/guild-member-add) Gateway event.
   * 
   * For guilds with [Membership Screening](#DOCS_RESOURCES_GUILD/membership-screening-object) enabled, this endpoint will default to adding new members as `pending` in the [guild member object](#DOCS_RESOURCES_GUILD/guild-member-object). Members that are `pending` will have to complete membership screening before they become full members that can talk.
   * 
   * All parameters to this endpoint except for `access_token` are optional.
   * 
   * The Authorization header must be a Bot token (belonging to the same application used for authorization), and the bot must be a member of the guild with `CREATE_INSTANT_INVITE` permission.
   */
  addGuildMember: Route<{
    params: ["guildId", "userId"],
    body: Discord.RESTPutAPIGuildMemberJSONBody,
    result: never,
  }>,
  /**
   * ## [Modify Guild Member](https://discordapp.com/developers/docs/resources/guild#modify-guild-member)
   * 
   * Modify attributes of a [guild member](https://discordapp.com/developers/docs/resources/guild#guild-member-object). Returns a 200 OK with the [guild member](#DOCS_RESOURCES_GUILD/guild-member-object) as the body. Fires a [Guild Member Update](#DOCS_TOPICS_GATEWAY/guild-member-update) Gateway event. If the `channel_id` is set to null, this will force the target user to be disconnected from voice.
   * 
   * All parameters to this endpoint are optional and nullable. When moving members to channels, the API user _must_ have permissions to both connect to the channel and have the `MOVE_MEMBERS` permission.
   */
  modifyGuildMember: Route<{
    params: ["guildId", "userId"],
    body: Discord.RESTPatchAPIGuildMemberJSONBody,
    result: Discord.RESTPatchAPIGuildMemberResult,
    reason: true,
  }>,
  /**
   * ## [Modify Current Member](https://discordapp.com/developers/docs/resources/guild#modify-current-member)
   * 
   * Modifies the current member in a guild. Returns a 200 with the updated member object on success. Fires a [Guild Member Update](https://discordapp.com/developers/docs/topics/gateway#guild-member-update) Gateway event.
   */
  modifyCurrentMember: Route<{
    params: ["guildId"],
    body: Discord.RESTPatchAPICurrentGuildMemberJSONBody,
    result: Discord.RESTGetAPIGuildMemberResult,
    reason: true,
  }>,
  /**
   * @deprecated **Deprecated in favor of [Modify Current Member](https://discordapp.com/developers/docs/resources/guild#modify-current-member).**
   * 
   * ## [Modify Current User Nick](https://discordapp.com/developers/docs/resources/guild#modify-current-user-nick)
   * 
   * Modifies the nickname of the current user in a guild. Returns a 200 with the nickname on success. Fires a [Guild Member Update](#DOCS_TOPICS_GATEWAY/guild-member-update) Gateway event.
   */
  modifyCurrentUserNick: Route<{
    params: ["guildId"],
    body: Discord.RESTPatchAPICurrentGuildMemberNicknameJSONBody,
    result: Discord.RESTPatchAPICurrentGuildMemberNicknameResult,
    reason: true,
  }>,
  /**
   * ## [Add Guild Member Role](https://discordapp.com/developers/docs/resources/guild#add-guild-member-role)
   * 
   * Adds a role to a [guild member](https://discordapp.com/developers/docs/resources/guild#guild-member-object). Requires the `MANAGE_ROLES` permission. Returns a 204 empty response on success. Fires a [Guild Member Update](#DOCS_TOPICS_GATEWAY/guild-member-update) Gateway event.
   */
  addGuildMemberRole: Route<{
    params: ["guildId", "userId", "roleId"],
    result: Discord.RESTPutAPIGuildMemberRoleResult,
    reason: true,
  }>,
  /**
   * ## [Remove Guild Member Role](https://discordapp.com/developers/docs/resources/guild#remove-guild-member-role)
   * 
   * Removes a role from a [guild member](https://discordapp.com/developers/docs/resources/guild#guild-member-object). Requires the `MANAGE_ROLES` permission. Returns a 204 empty response on success. Fires a [Guild Member Update](#DOCS_TOPICS_GATEWAY/guild-member-update) Gateway event.
   */
  removeGuildMemberRole: Route<{
    params: ["guildId", "userId", "roleId"],
    result: Discord.RESTDeleteAPIGuildMemberRoleResult,
    reason: true,
  }>,
  /**
   * ## [Remove Guild Member](https://discordapp.com/developers/docs/resources/guild#remove-guild-member)
   * 
   * Remove a member from a guild. Requires `KICK_MEMBERS` permission. Returns a 204 empty response on success. Fires a [Guild Member Remove](https://discordapp.com/developers/docs/topics/gateway#guild-member-remove) Gateway event.
   */
  removeGuildMember: Route<{
    params: ["guildId", "userId"],
    result: Discord.RESTDeleteAPIGuildMemberResult,
    reason: true,
  }>,
  /**
   * ## [Get Guild Bans](https://discordapp.com/developers/docs/resources/guild#get-guild-bans)
   * 
   * Returns a list of [ban](https://discordapp.com/developers/docs/resources/guild#ban-object) objects for the users banned from this guild. Requires the `BAN_MEMBERS` permission.
   */
  getGuildBans: Route<{
    params: ["guildId"],
    query: Discord.RESTGetAPIGuildBansQuery,
    result: Discord.RESTGetAPIGuildBansResult,
  }>,
  /**
   * ## [Get Guild Ban](https://discordapp.com/developers/docs/resources/guild#get-guild-ban)
   * 
   * Returns a [ban](https://discordapp.com/developers/docs/resources/guild#ban-object) object for the given user or a 404 not found if the ban cannot be found. Requires the `BAN_MEMBERS` permission.
   */
  getGuildBan: Route<{
    params: ["guildId", "userId"],
    result: Discord.RESTGetAPIGuildBanResult,
  }>,
  /**
   * ## [Create Guild Ban](https://discordapp.com/developers/docs/resources/guild#create-guild-ban)
   * 
   * Create a guild ban, and optionally delete previous messages sent by the banned user. Requires the `BAN_MEMBERS` permission. Returns a 204 empty response on success. Fires a [Guild Ban Add](https://discordapp.com/developers/docs/topics/gateway#guild-ban-add) Gateway event.
   */
  createGuildBan: Route<{
    params: ["guildId", "userId"],
    body: Discord.RESTPutAPIGuildBanJSONBody,
    result: Discord.RESTPutAPIGuildBanResult,
    reason: true,
  }>,
  /**
   * ## [Remove Guild Ban](https://discordapp.com/developers/docs/resources/guild#remove-guild-ban)
   * 
   * Remove the ban for a user. Requires the `BAN_MEMBERS` permissions. Returns a 204 empty response on success. Fires a [Guild Ban Remove](https://discordapp.com/developers/docs/topics/gateway#guild-ban-remove) Gateway event.
   */
  removeGuildBan: Route<{
    params: ["guildId", "userId"],
    result: Discord.RESTDeleteAPIGuildBanResult,
    reason: true,
  }>,
  /**
   * ## [Get Guild Roles](https://discordapp.com/developers/docs/resources/guild#get-guild-roles)
   * 
   * Returns a list of [role](https://discordapp.com/developers/docs/topics/permissions#role-object) objects for the guild.
   */
  getGuildRoles: Route<{
    params: ["guildId"],
    result: Discord.RESTGetAPIGuildRolesResult,
  }>,
  /**
   * ## [Create Guild Role](https://discordapp.com/developers/docs/resources/guild#create-guild-role)
   * 
   * Create a new [role](https://discordapp.com/developers/docs/topics/permissions#role-object) for the guild. Requires the `MANAGE_ROLES` permission. Returns the new [role](#DOCS_TOPICS_PERMISSIONS/role-object) object on success. Fires a [Guild Role Create](#DOCS_TOPICS_GATEWAY/guild-role-create) Gateway event. All JSON params are optional.
   */
  createGuildRole: Route<{
    params: ["guildId"],
    body: Discord.RESTPostAPIGuildRoleJSONBody,
    result: Discord.RESTPostAPIGuildRoleResult,
    reason: true,
  }>,
  /**
   * ## [Modify Guild Role Positions](https://discordapp.com/developers/docs/resources/guild#modify-guild-role-positions)
   * 
   * Modify the positions of a set of [role](https://discordapp.com/developers/docs/topics/permissions#role-object) objects for the guild. Requires the `MANAGE_ROLES` permission. Returns a list of all of the guild's [role](#DOCS_TOPICS_PERMISSIONS/role-object) objects on success. Fires multiple [Guild Role Update](#DOCS_TOPICS_GATEWAY/guild-role-update) Gateway events.
   */
  modifyGuildRolePositions: Route<{
    params: ["guildId"],
    body: Discord.RESTPatchAPIGuildRoleJSONBody,
    result: Discord.RESTPatchAPIGuildRoleResult,
    reason: true,
  }>,
  /**
   * ## [Modify Guild Role](https://discordapp.com/developers/docs/resources/guild#modify-guild-role)
   * 
   * Modify a guild role. Requires the `MANAGE_ROLES` permission. Returns the updated [role](https://discordapp.com/developers/docs/topics/permissions#role-object) on success. Fires a [Guild Role Update](#DOCS_TOPICS_GATEWAY/guild-role-update) Gateway event.
   * 
   * All parameters to this endpoint are optional and nullable.
   */
  modifyGuildRole: Route<{
    params: ["guildId", "roleId"],
    body: Discord.RESTPatchAPIGuildRoleJSONBody,
    result: Discord.RESTPatchAPIGuildRoleResult,
    reason: true,
  }>,
  /**
   * ## [Modify Guild MFA Level](https://discordapp.com/developers/docs/resources/guild#modify-guild-mfa-level)
   * 
   * Modify a guild's MFA level. Requires guild ownership. Returns the updated [level](https://discordapp.com/developers/docs/resources/guild#guild-object-mfa-level) on success. Fires a [Guild Update](#DOCS_TOPICS_GATEWAY/guild-update) Gateway event.
   */
  modifyGuildMFALevel: Route<{
    params: ["guildId"],
    body: Discord.RESTPostAPIGuildsMFAJSONBody,
    result: Discord.RESTPostAPIGuildsMFAResult,
  }>,
  /**
   * ## [Delete Guild Role](https://discordapp.com/developers/docs/resources/guild#delete-guild-role)
   * 
   * Delete a guild role. Requires the `MANAGE_ROLES` permission. Returns a 204 empty response on success. Fires a [Guild Role Delete](https://discordapp.com/developers/docs/topics/gateway#guild-role-delete) Gateway event.
   */
  deleteGuildRole: Route<{
    params: ["guildId", "roleId"],
    result: Discord.RESTDeleteAPIGuildRoleResult,
    reason: true,
  }>,
  /**
   * ## [Get Guild Prune Count](https://discordapp.com/developers/docs/resources/guild#get-guild-prune-count)
   * 
   * Returns an object with one `pruned` key indicating the number of members that would be removed in a prune operation. Requires the `KICK_MEMBERS` permission.
   * 
   * By default, prune will not remove users with roles. You can optionally include specific roles in your prune by providing the `include_roles` parameter. Any inactive user that has a subset of the provided role(s) will be counted in the prune and users with additional roles will not.
   */
  getGuildPruneCount: Route<{
    params: ["guildId"],
    query: Discord.RESTGetAPIGuildPruneCountQuery,
    result: Discord.RESTGetAPIGuildPruneCountResult,
  }>,
  /**
   * ## [Begin Guild Prune](https://discordapp.com/developers/docs/resources/guild#begin-guild-prune)
   * 
   * Begin a prune operation. Requires the `KICK_MEMBERS` permission. Returns an object with one `pruned` key indicating the number of members that were removed in the prune operation. For large guilds it's recommended to set the `compute_prune_count` option to `false`, forcing `pruned` to `null`. Fires multiple [Guild Member Remove](https://discordapp.com/developers/docs/topics/gateway#guild-member-remove) Gateway events.
   * 
   * By default, prune will not remove users with roles. You can optionally include specific roles in your prune by providing the `include_roles` parameter. Any inactive user that has a subset of the provided role(s) will be included in the prune and users with additional roles will not.
   */
  beginGuildPrune: Route<{
    params: ["guildId"],
    body: Discord.RESTPostAPIGuildPruneJSONBody,
    result: Discord.RESTPostAPIGuildPruneResult,
    reason: true,
  }>,
  /**
   * ## [Get Guild Voice Regions](https://discordapp.com/developers/docs/resources/guild#get-guild-voice-regions)
   * 
   * Returns a list of [voice region](https://discordapp.com/developers/docs/resources/voice#voice-region-object) objects for the guild. Unlike the similar `/voice` route, this returns VIP servers when the guild is VIP-enabled.
   */
  getGuildVoiceRegions: Route<{
    params: ["guildId"],
    result: Discord.RESTGetAPIGuildVoiceRegionsResult,
  }>,
  /**
   * ## [Get Guild Invites](https://discordapp.com/developers/docs/resources/guild#get-guild-invites)
   * 
   * Returns a list of [invite](https://discordapp.com/developers/docs/resources/invite#invite-object) objects (with [invite metadata](#DOCS_RESOURCES_INVITE/invite-metadata-object)) for the guild. Requires the `MANAGE_GUILD` permission.
   */
  getGuildInvites: Route<{
    params: ["guildId"],
    result: Discord.RESTGetAPIGuildInvitesResult,
  }>,
  /**
   * ## [Get Guild Integrations](https://discordapp.com/developers/docs/resources/guild#get-guild-integrations)
   * 
   * Returns a list of [integration](https://discordapp.com/developers/docs/resources/guild#integration-object) objects for the guild. Requires the `MANAGE_GUILD` permission.
   */
  getGuildIntegrations: Route<{
    params: ["guildId"],
    result: Discord.RESTGetAPIGuildIntegrationsResult,
  }>,
  /**
   * ## [Delete Guild Integration](https://discordapp.com/developers/docs/resources/guild#delete-guild-integration)
   * 
   * Delete the attached [integration](https://discordapp.com/developers/docs/resources/guild#integration-object) object for the guild. Deletes any associated webhooks and kicks the associated bot if there is one. Requires the `MANAGE_GUILD` permission. Returns a 204 empty response on success. Fires a [Guild Integrations Update](#DOCS_TOPICS_GATEWAY/guild-integrations-update) Gateway event.
   */
  deleteGuildIntegration: Route<{
    params: ["guildId", "integrationId"],
    result: Discord.RESTDeleteAPIGuildIntegrationResult,
    reason: true,
  }>,
  /**
   * ## [Get Guild Widget Settings](https://discordapp.com/developers/docs/resources/guild#get-guild-widget-settings)
   * 
   * Returns a [guild widget settings](https://discordapp.com/developers/docs/resources/guild#guild-widget-settings-object) object. Requires the `MANAGE_GUILD` permission.
   */
  getGuildWidgetSettings: Route<{
    params: ["guildId"],
    result: Discord.RESTGetAPIGuildWidgetSettingsResult,
  }>,
  /**
   * ## [Modify Guild Widget](https://discordapp.com/developers/docs/resources/guild#modify-guild-widget)
   * 
   * Modify a [guild widget settings](https://discordapp.com/developers/docs/resources/guild#guild-widget-settings-object) object for the guild. All attributes may be passed in with JSON and modified. Requires the `MANAGE_GUILD` permission. Returns the updated [guild widget](#DOCS_RESOURCES_GUILD/guild-widget-settings-object) object.
   */
  modifyGuildWidget: Route<{
    params: ["guildId"],
    body: Discord.RESTPatchAPIGuildWidgetSettingsJSONBody,
    result: Discord.RESTPatchAPIGuildWidgetSettingsResult,
    reason: true,
  }>,
  /**
   * ## [Get Guild Widget](https://discordapp.com/developers/docs/resources/guild#get-guild-widget)
   * 
   * Returns the [widget](https://discordapp.com/developers/docs/resources/guild#guild-widget-object) for the guild.
   */
  getGuildWidget: Route<{
    params: ["guildId"],
    result: Discord.RESTGetAPIGuildWidgetJSONResult,
  }>,
  /**
   * ## [Get Guild Vanity URL](https://discordapp.com/developers/docs/resources/guild#get-guild-vanity-url)
   * 
   * Returns a partial [invite](https://discordapp.com/developers/docs/resources/invite#invite-object) object for guilds with that feature enabled. Requires the `MANAGE_GUILD` permission. `code` will be null if a vanity url for the guild is not set.
   */
  getGuildVanityURL: Route<{
    params: ["guildId"],
    result: Discord.RESTGetAPIGuildVanityUrlResult,
  }>,
  /**
   * ## [Get Guild Widget Image](https://discordapp.com/developers/docs/resources/guild#get-guild-widget-image)
   * 
   * Returns a PNG image widget for the guild. Requires no permissions or authentication.
   * 
   * All parameters to this endpoint are optional.
   */
  getGuildWidgetImage: Route<{
    params: ["guildId"],
    query: Discord.RESTGetAPIGuildWidgetImageQuery,
    result: Discord.RESTGetAPIGuildWidgetImageResult,
  }>,
  /**
   * ## [Get Guild Welcome Screen](https://discordapp.com/developers/docs/resources/guild#get-guild-welcome-screen)
   * 
   * Returns the [Welcome Screen](https://discordapp.com/developers/docs/resources/guild#welcome-screen-object) object for the guild. If the welcome screen is not enabled, the `MANAGE_GUILD` permission is required.
   */
  getGuildWelcomeScreen: Route<{
    params: ["guildId"],
    result: Discord.RESTGetAPIGuildWelcomeScreenResult,
  }>,
  /**
   * ## [Modify Guild Welcome Screen](https://discordapp.com/developers/docs/resources/guild#modify-guild-welcome-screen)
   * 
   * Modify the guild's [Welcome Screen](https://discordapp.com/developers/docs/resources/guild#welcome-screen-object). Requires the `MANAGE_GUILD` permission. Returns the updated [Welcome Screen](#DOCS_RESOURCES_GUILD/welcome-screen-object) object.
   * 
   * All parameters to this endpoint are optional and nullable
   */
  modifyGuildWelcomeScreen: Route<{
    params: ["guildId"],
    body: Discord.RESTPatchAPIGuildWelcomeScreenJSONBody,
    result: Discord.RESTPatchAPIGuildWelcomeScreenResult,
    reason: true,
  }>,
  /**
   * ## [Modify Current User Voice State](https://discordapp.com/developers/docs/resources/guild#modify-current-user-voice-state)
   * 
   * Updates the current user's voice state. Returns `204 No Content` on success.
   */
  modifyCurrentUserVoiceState: Route<{
    params: ["guildId"],
    body: Discord.RESTPatchAPIGuildVoiceStateCurrentMemberJSONBody,
    result: never,
  }>,
  /**
   * ## [Modify User Voice State](https://discordapp.com/developers/docs/resources/guild#modify-user-voice-state)
   * 
   * Updates another user's voice state.
   */
  modifyUserVoiceState: Route<{
    params: ["guildId", "userId"],
    body: Discord.RESTPatchAPIGuildVoiceStateUserJSONBody,
    result: never,
  }>,
}>;
export declare const Guild: RouteGroupClass<Guild>;


export type GuildScheduledEvent = RouteGroup<{
  /**
   * ## [List Scheduled Events for Guild](https://discordapp.com/developers/docs/resources/guild-scheduled-event#list-scheduled-events-for-guild)
   * 
   * Returns a list of [guild scheduled event](https://discordapp.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object) objects for the given guild.
   */
  listScheduledEventsForGuild: Route<{
    params: ["guildId"],
    query: Discord.RESTGetAPIGuildScheduledEventsQuery,
    result: Discord.RESTGetAPIGuildScheduledEventsResult,
  }>,
  /**
   * ## [Create Guild Scheduled Event](https://discordapp.com/developers/docs/resources/guild-scheduled-event#create-guild-scheduled-event)
   * 
   * Create a guild scheduled event in the guild. Returns a [guild scheduled event](https://discordapp.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object) object on success.
   * 
   * A guild can have a maximum of 100 events with `SCHEDULED` or `ACTIVE` status at any time.
   */
  createGuildScheduledEvent: Route<{
    params: ["guildId"],
    body: Discord.RESTPostAPIGuildScheduledEventJSONBody,
    result: Discord.RESTPostAPIGuildScheduledEventResult,
    reason: true,
  }>,
  /**
   * ## [Get Guild Scheduled Event](https://discordapp.com/developers/docs/resources/guild-scheduled-event#get-guild-scheduled-event)
   * 
   * Get a guild scheduled event. Returns a [guild scheduled event](https://discordapp.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object) object on success.
   */
  getGuildScheduledEvent: Route<{
    params: ["guildId", "guildScheduledEventId"],
    query: Discord.RESTGetAPIGuildScheduledEventQuery,
    result: Discord.RESTGetAPIGuildScheduledEventResult,
  }>,
  /**
   * ## [Modify Guild Scheduled Event](https://discordapp.com/developers/docs/resources/guild-scheduled-event#modify-guild-scheduled-event)
   * 
   * Modify a guild scheduled event. Returns the modified [guild scheduled event](https://discordapp.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object) object on success.
   * 
   * To start or end an event, use this endpoint to modify the event's [status](#DOCS_RESOURCES_GUILD_SCHEDULED_EVENT/guild-scheduled-event-object-guild-scheduled-event-status) field.
   * 
   * This endpoint silently discards `entity_metadata` for non-`EXTERNAL` events.
   */
  modifyGuildScheduledEvent: Route<{
    params: ["guildId", "guildScheduledEventId"],
    body: Discord.RESTPatchAPIGuildScheduledEventJSONBody,
    result: Discord.RESTPatchAPIGuildScheduledEventResult,
    reason: true,
  }>,
  /**
   * ## [Delete Guild Scheduled Event](https://discordapp.com/developers/docs/resources/guild-scheduled-event#delete-guild-scheduled-event)
   * 
   * Delete a guild scheduled event. Returns a `204` on success.
   */
  deleteGuildScheduledEvent: Route<{
    params: ["guildId", "guildScheduledEventId"],
    result: Discord.RESTDeleteAPIGuildScheduledEventResult,
  }>,
  /**
   * ## [Get Guild Scheduled Event Users](https://discordapp.com/developers/docs/resources/guild-scheduled-event#get-guild-scheduled-event-users)
   * 
   * Get a list of guild scheduled event users subscribed to a guild scheduled event. Returns a list of [guild scheduled event user](https://discordapp.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-user-object) objects on success. Guild member data, if it exists, is included if the `with_member` query parameter is set.
   */
  getGuildScheduledEventUsers: Route<{
    params: ["guildId", "guildScheduledEventId"],
    query: Discord.RESTGetAPIGuildScheduledEventUsersQuery,
    result: Discord.RESTGetAPIGuildScheduledEventUsersResult,
  }>,
}>;
export declare const GuildScheduledEvent: RouteGroupClass<GuildScheduledEvent>;


export type GuildTemplate = RouteGroup<{
  /**
   * ## [Get Guild Template](https://discordapp.com/developers/docs/resources/guild-template#get-guild-template)
   * 
   * Returns a [guild template](https://discordapp.com/developers/docs/resources/guild-template#guild-template-object) object for the given code.
   */
  getGuildTemplate: Route<{
    params: ["templateCode"],
    result: Discord.RESTGetAPITemplateResult,
  }>,
  /**
   * ## [Create Guild from Guild Template](https://discordapp.com/developers/docs/resources/guild-template#create-guild-from-guild-template)
   * 
   * Create a new guild based on a template. Returns a [guild](https://discordapp.com/developers/docs/resources/guild#guild-object) object on success. Fires a [Guild Create](#DOCS_TOPICS_GATEWAY/guild-create) Gateway event.
   * 
   * This endpoint can be used only by bots in less than 10 guilds.
   */
  createGuildFromGuildTemplate: Route<{
    params: ["templateCode"],
    body: Discord.RESTPostAPITemplateCreateGuildJSONBody,
    result: Discord.RESTPostAPITemplateCreateGuildResult,
  }>,
  /**
   * ## [Get Guild Templates](https://discordapp.com/developers/docs/resources/guild-template#get-guild-templates)
   * 
   * Returns an array of [guild template](https://discordapp.com/developers/docs/resources/guild-template#guild-template-object) objects. Requires the `MANAGE_GUILD` permission.
   */
  getGuildTemplates: Route<{
    params: ["guildId"],
    result: Discord.RESTGetAPIGuildTemplatesResult,
  }>,
  /**
   * ## [Create Guild Template](https://discordapp.com/developers/docs/resources/guild-template#create-guild-template)
   * 
   * Creates a template for the guild. Requires the `MANAGE_GUILD` permission. Returns the created [guild template](https://discordapp.com/developers/docs/resources/guild-template#guild-template-object) object on success.
   */
  createGuildTemplate: Route<{
    params: ["guildId"],
    body: Discord.RESTPostAPIGuildTemplatesJSONBody,
    result: Discord.RESTPostAPIGuildTemplatesResult,
  }>,
  /**
   * ## [Sync Guild Template](https://discordapp.com/developers/docs/resources/guild-template#sync-guild-template)
   * 
   * Syncs the template to the guild's current state. Requires the `MANAGE_GUILD` permission. Returns the [guild template](https://discordapp.com/developers/docs/resources/guild-template#guild-template-object) object on success.
   */
  syncGuildTemplate: Route<{
    params: ["guildId", "templateCode"],
    result: Discord.RESTPutAPIGuildTemplateSyncResult,
  }>,
  /**
   * ## [Modify Guild Template](https://discordapp.com/developers/docs/resources/guild-template#modify-guild-template)
   * 
   * Modifies the template's metadata. Requires the `MANAGE_GUILD` permission. Returns the [guild template](https://discordapp.com/developers/docs/resources/guild-template#guild-template-object) object on success.
   */
  modifyGuildTemplate: Route<{
    params: ["guildId", "templateCode"],
    body: Discord.RESTPatchAPIGuildTemplateJSONBody,
    result: Discord.RESTPatchAPIGuildTemplateResult,
  }>,
  /**
   * ## [Delete Guild Template](https://discordapp.com/developers/docs/resources/guild-template#delete-guild-template)
   * 
   * Deletes the template. Requires the `MANAGE_GUILD` permission. Returns the deleted [guild template](https://discordapp.com/developers/docs/resources/guild-template#guild-template-object) object on success.
   */
  deleteGuildTemplate: Route<{
    params: ["guildId", "templateCode"],
    result: Discord.RESTDeleteAPIGuildTemplateResult,
  }>,
}>;
export declare const GuildTemplate: RouteGroupClass<GuildTemplate>;


export type InteractionResponse = RouteGroup<{
  /**
   * ## [Create Interaction Response](https://discordapp.com/developers/docs/interactions/receiving-and-responding#create-interaction-response)
   * 
   * Create a response to an Interaction from the gateway. Body is an [interaction response](https://discordapp.com/developers/docs/interactions/receiving-and-responding#interaction-response-object). Returns `204 No Content`.
   * 
   * This endpoint also supports file attachments similar to the webhook endpoints. Refer to [Uploading Files](#DOCS_REFERENCE/uploading-files) for details on uploading files and `multipart/form-data` requests.
   */
  createInteractionResponse: Route<{
    params: ["interactionId", "interactionToken"],
    body: Discord.RESTPostAPIInteractionCallbackJSONBody,
    result: never,
    file: true,
  }>,
  /**
   * ## [Get Original Interaction Response](https://discordapp.com/developers/docs/interactions/receiving-and-responding#get-original-interaction-response)
   * 
   * Returns the initial Interaction response. Functions the same as [Get Webhook Message](https://discordapp.com/developers/docs/resources/webhook#get-webhook-message).
   */
  getOriginalInteractionResponse: Route<{
    params: ["applicationId", "interactionToken"],
    result: Discord.RESTGetAPIInteractionFollowupResult,
  }>,
  /**
   * ## [Edit Original Interaction Response](https://discordapp.com/developers/docs/interactions/receiving-and-responding#edit-original-interaction-response)
   * 
   * Edits the initial Interaction response. Functions the same as [Edit Webhook Message](https://discordapp.com/developers/docs/resources/webhook#edit-webhook-message).
   */
  editOriginalInteractionResponse: Route<{
    params: ["applicationId", "interactionToken"],
    body: Discord.RESTPatchAPIInteractionFollowupJSONBody,
    result: Discord.RESTPatchAPIInteractionFollowupResult,
    file: true,
  }>,
  /**
   * ## [Delete Original Interaction Response](https://discordapp.com/developers/docs/interactions/receiving-and-responding#delete-original-interaction-response)
   * 
   * Deletes the initial Interaction response. Returns `204 No Content` on success. Does not support ephemeral followups.
   */
  deleteOriginalInteractionResponse: Route<{
    params: ["applicationId", "interactionToken"],
    result: never,
  }>,
  /**
   * ## [Create Followup Message](https://discordapp.com/developers/docs/interactions/receiving-and-responding#create-followup-message)
   * 
   * Create a followup message for an Interaction. Functions the same as [Execute Webhook](https://discordapp.com/developers/docs/resources/webhook#execute-webhook), but `wait` is always true. The `thread_id`, `avatar_url`, and `username` parameters are not supported when using this endpoint for interaction followups.
   * 
   * `flags` can be set to `64` to mark the message as ephemeral, except when it is the first followup message to a deferred Interactions Response. In that case, the `flags` field will be ignored, and the ephemerality of the message will be determined by the `flags` value in your original ACK.
   */
  createFollowupMessage: Route<{
    params: ["applicationId", "interactionToken"],
    body: Discord.RESTPostAPIInteractionFollowupJSONBody,
    result: Discord.RESTPostAPIInteractionFollowupResult,
  }>,
  /**
   * ## [Get Followup Message](https://discordapp.com/developers/docs/interactions/receiving-and-responding#get-followup-message)
   * 
   * Returns a followup message for an Interaction. Functions the same as [Get Webhook Message](https://discordapp.com/developers/docs/resources/webhook#get-webhook-message).
   */
  getFollowupMessage: Route<{
    params: ["applicationId", "interactionToken", "messageId"],
    result: Discord.RESTGetAPIInteractionFollowupResult,
  }>,
  /**
   * ## [Edit Followup Message](https://discordapp.com/developers/docs/interactions/receiving-and-responding#edit-followup-message)
   * 
   * Edits a followup message for an Interaction. Functions the same as [Edit Webhook Message](https://discordapp.com/developers/docs/resources/webhook#edit-webhook-message).
   */
  editFollowupMessage: Route<{
    params: ["applicationId", "interactionToken", "messageId"],
    body: Discord.RESTPatchAPIInteractionFollowupJSONBody,
    result: Discord.RESTPatchAPIInteractionFollowupResult,
    file: true,
  }>,
  /**
   * ## [Delete Followup Message](https://discordapp.com/developers/docs/interactions/receiving-and-responding#delete-followup-message)
   * 
   * Deletes a followup message for an Interaction. Returns `204 No Content` on success. Does not support ephemeral followups.
   */
  deleteFollowupMessage: Route<{
    params: ["applicationId", "interactionToken", "messageId"],
    result: never,
  }>,
}>;
export declare const InteractionResponse: RouteGroupClass<InteractionResponse>;


export type Invite = RouteGroup<{
  /**
   * ## [Get Invite](https://discordapp.com/developers/docs/resources/invite#get-invite)
   * 
   * Returns an [invite](https://discordapp.com/developers/docs/resources/invite#invite-object) object for the given code.
   */
  getInvite: Route<{
    params: ["inviteCode"],
    query: Discord.RESTGetAPIInviteQuery,
    result: Discord.RESTGetAPIInviteResult,
  }>,
  /**
   * ## [Delete Invite](https://discordapp.com/developers/docs/resources/invite#delete-invite)
   * 
   * Delete an invite. Requires the `MANAGE_CHANNELS` permission on the channel this invite belongs to, or `MANAGE_GUILD` to remove any invite across the guild. Returns an [invite](https://discordapp.com/developers/docs/resources/invite#invite-object) object on success. Fires a [Invite Delete](#DOCS_TOPICS_GATEWAY/invite-delete) Gateway event.
   */
  deleteInvite: Route<{
    params: ["inviteCode"],
    result: Discord.RESTDeleteAPIInviteResult,
    reason: true,
  }>,
}>;
export declare const Invite: RouteGroupClass<Invite>;


export type Oauth2 = RouteGroup<{
  /**
   * ## [Get Current Bot Application Information](https://discordapp.com/developers/docs/topics/oauth2#get-current-bot-application-information)
   * 
   * Returns the bot's [application](https://discordapp.com/developers/docs/resources/application#application-object) object.
   */
  getCurrentBotApplicationInformation: Route<{
    result: Discord.RESTGetAPIOAuth2CurrentApplicationResult,
  }>,
  /**
   * ## [Get Current Authorization Information](https://discordapp.com/developers/docs/topics/oauth2#get-current-authorization-information)
   * 
   * Returns info about the current authorization. Requires authentication with a bearer token.
   */
  getCurrentAuthorizationInformation: Route<{
    result: Discord.RESTGetAPIOAuth2CurrentAuthorizationResult,
  }>,
}>;
export declare const Oauth2: RouteGroupClass<Oauth2>;


export type StageInstance = RouteGroup<{
  /**
   * ## [Create Stage Instance](https://discordapp.com/developers/docs/resources/stage-instance#create-stage-instance)
   * 
   * Creates a new Stage instance associated to a Stage channel. Returns that [Stage instance](https://discordapp.com/developers/docs/resources/stage-instance#stage-instance-object-stage-instance-structure).
   * 
   * Requires the user to be a moderator of the Stage channel.
   */
  createStageInstance: Route<{
    body: Discord.RESTPostAPIStageInstanceJSONBody,
    result: Discord.RESTPostAPIStageInstanceResult,
    reason: true,
  }>,
  /**
   * ## [Get Stage Instance](https://discordapp.com/developers/docs/resources/stage-instance#get-stage-instance)
   * 
   * Gets the stage instance associated with the Stage channel, if it exists.
   */
  getStageInstance: Route<{
    params: ["channelId"],
    result: Discord.RESTGetAPIStageInstanceResult,
  }>,
  /**
   * ## [Modify Stage Instance](https://discordapp.com/developers/docs/resources/stage-instance#modify-stage-instance)
   * 
   * Updates fields of an existing Stage instance. Returns the updated [Stage instance](https://discordapp.com/developers/docs/resources/stage-instance#stage-instance-object-stage-instance-structure).
   * 
   * Requires the user to be a moderator of the Stage channel.
   */
  modifyStageInstance: Route<{
    params: ["channelId"],
    body: Discord.RESTPatchAPIStageInstanceJSONBody,
    result: Discord.RESTPatchAPIStageInstanceResult,
    reason: true,
  }>,
  /**
   * ## [Delete Stage Instance](https://discordapp.com/developers/docs/resources/stage-instance#delete-stage-instance)
   * 
   * Deletes the Stage instance. Returns `204 No Content`.
   * 
   * Requires the user to be a moderator of the Stage channel.
   */
  deleteStageInstance: Route<{
    params: ["channelId"],
    result: never,
    reason: true,
  }>,
}>;
export declare const StageInstance: RouteGroupClass<StageInstance>;


export type Sticker = RouteGroup<{
  /**
   * ## [Get Sticker](https://discordapp.com/developers/docs/resources/sticker#get-sticker)
   * 
   * Returns a [sticker](https://discordapp.com/developers/docs/resources/sticker#sticker-object) object for the given sticker ID.
   */
  getSticker: Route<{
    params: ["stickerId"],
    result: Discord.RESTGetAPIStickerResult,
  }>,
  /**
   * ## [List Nitro Sticker Packs](https://discordapp.com/developers/docs/resources/sticker#list-nitro-sticker-packs)
   * 
   * Returns the list of sticker packs available to Nitro subscribers.
   */
  listNitroStickerPacks: Route<{
    result: Discord.RESTGetNitroStickerPacksResult,
  }>,
  /**
   * ## [List Guild Stickers](https://discordapp.com/developers/docs/resources/sticker#list-guild-stickers)
   * 
   * Returns an array of [sticker](https://discordapp.com/developers/docs/resources/sticker#sticker-object) objects for the given guild. Includes `user` fields if the bot has the `MANAGE_EMOJIS_AND_STICKERS` permission.
   */
  listGuildStickers: Route<{
    params: ["guildId"],
    result: Discord.RESTGetAPIGuildStickersResult,
  }>,
  /**
   * ## [Get Guild Sticker](https://discordapp.com/developers/docs/resources/sticker#get-guild-sticker)
   * 
   * Returns a [sticker](https://discordapp.com/developers/docs/resources/sticker#sticker-object) object for the given guild and sticker IDs. Includes the `user` field if the bot has the `MANAGE_EMOJIS_AND_STICKERS` permission.
   */
  getGuildSticker: Route<{
    params: ["guildId", "stickerId"],
    result: Discord.RESTGetAPIGuildStickerResult,
  }>,
  /**
   * ## [Create Guild Sticker](https://discordapp.com/developers/docs/resources/sticker#create-guild-sticker)
   * 
   * Create a new sticker for the guild. Send a `multipart/form-data` body. Requires the `MANAGE_EMOJIS_AND_STICKERS` permission. Returns the new [sticker](https://discordapp.com/developers/docs/resources/sticker#sticker-object) object on success.
   * 
   * Every guilds has five free sticker slots by default, and each Boost level will grant access to more slots.
   * 
   * Lottie stickers can only be uploaded on guilds that have either the `VERIFIED` and/or the `PARTNERED` [guild feature](#DOCS_RESOURCES_GUILD/guild-object-guild-features).
   */
  createGuildSticker: Route<{
    params: ["guildId"],
    result: Discord.RESTPostAPIGuildStickerResult,
    reason: true,
    form: Omit<Discord.RESTPostAPIGuildStickerFormDataBody, 'file'> & { file: FileData },
  }>,
  /**
   * ## [Modify Guild Sticker](https://discordapp.com/developers/docs/resources/sticker#modify-guild-sticker)
   * 
   * Modify the given sticker. Requires the `MANAGE_EMOJIS_AND_STICKERS` permission. Returns the updated [sticker](https://discordapp.com/developers/docs/resources/sticker#sticker-object) object on success.
   * 
   * All parameters to this endpoint are optional.
   */
  modifyGuildSticker: Route<{
    params: ["guildId", "stickerId"],
    body: Discord.RESTPatchAPIGuildStickerJSONBody,
    result: Discord.RESTPatchAPIGuildStickerResult,
    reason: true,
  }>,
  /**
   * ## [Delete Guild Sticker](https://discordapp.com/developers/docs/resources/sticker#delete-guild-sticker)
   * 
   * Delete the given sticker. Requires the `MANAGE_EMOJIS_AND_STICKERS` permission. Returns `204 No Content` on success.
   */
  deleteGuildSticker: Route<{
    params: ["guildId", "stickerId"],
    result: never,
    reason: true,
  }>,
}>;
export declare const Sticker: RouteGroupClass<Sticker>;


export type User = RouteGroup<{
  /**
   * ## [Get Current User](https://discordapp.com/developers/docs/resources/user#get-current-user)
   * 
   * Returns the [user](https://discordapp.com/developers/docs/resources/user#user-object) object of the requester's account. For OAuth2, this requires the `identify` scope, which will return the object _without_ an email, and optionally the `email` scope, which returns the object _with_ an email.
   */
  getCurrentUser: Route<{
    result: Discord.RESTGetAPICurrentUserResult,
  }>,
  /**
   * ## [Get User](https://discordapp.com/developers/docs/resources/user#get-user)
   * 
   * Returns a [user](https://discordapp.com/developers/docs/resources/user#user-object) object for a given user ID.
   */
  getUser: Route<{
    params: ["userId"],
    result: Discord.RESTGetAPIUserResult,
  }>,
  /**
   * ## [Modify Current User](https://discordapp.com/developers/docs/resources/user#modify-current-user)
   * 
   * Modify the requester's user account settings. Returns a [user](https://discordapp.com/developers/docs/resources/user#user-object) object on success.
   * 
   * All parameters to this endpoint are optional.
   */
  modifyCurrentUser: Route<{
    body: Discord.RESTPatchAPICurrentUserJSONBody,
    result: Discord.RESTPatchAPICurrentUserResult,
  }>,
  /**
   * ## [Get Current User Guilds](https://discordapp.com/developers/docs/resources/user#get-current-user-guilds)
   * 
   * Returns a list of partial [guild](https://discordapp.com/developers/docs/resources/guild#guild-object) objects the current user is a member of. Requires the `guilds` OAuth2 scope.
   */
  getCurrentUserGuilds: Route<{
    query: Discord.RESTGetAPICurrentUserGuildsQuery,
    result: Discord.RESTGetAPICurrentUserGuildsResult,
  }>,
  /**
   * ## [Get Current User Guild Member](https://discordapp.com/developers/docs/resources/user#get-current-user-guild-member)
   * 
   * Returns a [guild member](https://discordapp.com/developers/docs/resources/guild#guild-member-object) object for the current user. Requires the `guilds.members.read` OAuth2 scope.
   */
  getCurrentUserGuildMember: Route<{
    params: ["guildId"],
    result: Discord.RESTGetCurrentUserGuildMemberResult,
  }>,
  /**
   * ## [Leave Guild](https://discordapp.com/developers/docs/resources/user#leave-guild)
   * 
   * Leave a guild. Returns a 204 empty response on success.
   */
  leaveGuild: Route<{
    params: ["guildId"],
    result: Discord.RESTDeleteAPICurrentUserGuildResult,
  }>,
  /**
   * ## [Create DM](https://discordapp.com/developers/docs/resources/user#create-dm)
   * 
   * Create a new DM channel with a user. Returns a [DM channel](https://discordapp.com/developers/docs/resources/channel#channel-object) object.
   * 
   * You should not use this endpoint to DM everyone in a server about something. DMs should generally be initiated by a user action. If you open a significant amount of DMs too quickly, your bot may be rate limited or blocked from opening new ones.
   */
  createDM: Route<{
    body: Discord.RESTPostAPICurrentUserCreateDMChannelJSONBody,
    result: Discord.RESTPostAPICurrentUserCreateDMChannelResult,
  }>,
  /**
   * @deprecated **DMs created with this endpoint will not be shown in the Discord client**
   * 
   * ## [Create Group DM](https://discordapp.com/developers/docs/resources/user#create-group-dm)
   * 
   * Create a new group DM channel with multiple users. Returns a [DM channel](https://discordapp.com/developers/docs/resources/channel#channel-object) object. This endpoint was intended to be used with the now-deprecated GameBridge SDK. DMs created with this endpoint will not be shown in the Discord client
   * 
   * This endpoint is limited to 10 active group DMs.
   */
  createGroupDM: Route<{
    body: { access_tokens: string[]; nicks: Record<string, string> },
    result: Discord.RESTPostAPICurrentUserCreateDMChannelResult,
  }>,
  /**
   * ## [Get User Connections](https://discordapp.com/developers/docs/resources/user#get-user-connections)
   * 
   * Returns a list of [connection](https://discordapp.com/developers/docs/resources/user#connection-object) objects. Requires the `connections` OAuth2 scope.
   */
  getUserConnections: Route<{
    result: Discord.RESTGetAPICurrentUserConnectionsResult,
  }>,
}>;
export declare const User: RouteGroupClass<User>;


export type Voice = RouteGroup<{
  /**
   * ## [List Voice Regions](https://discordapp.com/developers/docs/resources/voice#list-voice-regions)
   * 
   * Returns an array of [voice region](https://discordapp.com/developers/docs/resources/voice#voice-region-object) objects that can be used when setting a voice or stage channel's [`rtc_region`](#DOCS_RESOURCES_CHANNEL/channel-object-channel-structure).
   */
  listVoiceRegions: Route<{
    result: Discord.RESTGetAPIGuildVoiceRegionsResult,
  }>,
}>;
export declare const Voice: RouteGroupClass<Voice>;


export type Webhook = RouteGroup<{
  /**
   * ## [Create Webhook](https://discordapp.com/developers/docs/resources/webhook#create-webhook)
   * 
   * Creates a new webhook and returns a [webhook](https://discordapp.com/developers/docs/resources/webhook#webhook-object) object on success. Requires the `MANAGE_WEBHOOKS` permission.
   * 
   * An error will be returned if a webhook name (`name`) is not valid. A webhook name is valid if:
   * - It does not contain the substring '**clyde**' (case-insensitive)
   * - It follows the nickname guidelines in the [Usernames and Nicknames](#DOCS_RESOURCES_USER/usernames-and-nicknames) documentation, with an exception that webhook names can be up to 80 characters
   */
  createWebhook: Route<{
    params: ["channelId"],
    body: Discord.RESTPostAPIChannelWebhookJSONBody,
    result: Discord.RESTPostAPIChannelWebhookResult,
    reason: true,
  }>,
  /**
   * ## [Get Channel Webhooks](https://discordapp.com/developers/docs/resources/webhook#get-channel-webhooks)
   * 
   * Returns a list of channel [webhook](https://discordapp.com/developers/docs/resources/webhook#webhook-object) objects. Requires the `MANAGE_WEBHOOKS` permission.
   */
  getChannelWebhooks: Route<{
    params: ["channelId"],
    result: Discord.RESTGetAPIChannelWebhooksResult,
  }>,
  /**
   * ## [Get Guild Webhooks](https://discordapp.com/developers/docs/resources/webhook#get-guild-webhooks)
   * 
   * Returns a list of guild [webhook](https://discordapp.com/developers/docs/resources/webhook#webhook-object) objects. Requires the `MANAGE_WEBHOOKS` permission.
   */
  getGuildWebhooks: Route<{
    params: ["guildId"],
    result: Discord.RESTGetAPIGuildWebhooksResult,
  }>,
  /**
   * ## [Get Webhook](https://discordapp.com/developers/docs/resources/webhook#get-webhook)
   * 
   * Returns the new [webhook](https://discordapp.com/developers/docs/resources/webhook#webhook-object) object for the given id.
   */
  getWebhook: Route<{
    params: ["webhookId"],
    result: Discord.RESTGetAPIWebhookResult,
  }>,
  /**
   * ## [Get Webhook with Token](https://discordapp.com/developers/docs/resources/webhook#get-webhook-with-token)
   * 
   * Same as above, except this call does not require authentication and returns no user in the webhook object.
   */
  getWebhookWithToken: Route<{
    params: ["webhookId", "webhookToken"],
    result: Discord.RESTGetAPIWebhookWithTokenResult,
  }>,
  /**
   * ## [Modify Webhook](https://discordapp.com/developers/docs/resources/webhook#modify-webhook)
   * 
   * Modify a webhook. Requires the `MANAGE_WEBHOOKS` permission. Returns the updated [webhook](https://discordapp.com/developers/docs/resources/webhook#webhook-object) object on success.
   * 
   * All parameters to this endpoint are optional
   */
  modifyWebhook: Route<{
    params: ["webhookId"],
    body: Discord.RESTPatchAPIWebhookJSONBody,
    result: Discord.RESTPatchAPIWebhookResult,
    reason: true,
  }>,
  /**
   * ## [Modify Webhook with Token](https://discordapp.com/developers/docs/resources/webhook#modify-webhook-with-token)
   * 
   * Same as above, except this call does not require authentication, does not accept a `channel_id` parameter in the body, and does not return a user in the webhook object.
   */
  modifyWebhookWithToken: Route<{
    params: ["webhookId", "webhookToken"],
    body: Discord.RESTPatchAPIWebhookWithTokenJSONBody,
    result: Discord.RESTPatchAPIWebhookWithTokenResult,
  }>,
  /**
   * ## [Delete Webhook](https://discordapp.com/developers/docs/resources/webhook#delete-webhook)
   * 
   * Delete a webhook permanently. Requires the `MANAGE_WEBHOOKS` permission. Returns a `204 No Content` response on success.
   */
  deleteWebhook: Route<{
    params: ["webhookId"],
    result: never,
    reason: true,
  }>,
  /**
   * ## [Delete Webhook with Token](https://discordapp.com/developers/docs/resources/webhook#delete-webhook-with-token)
   * 
   * Same as above, except this call does not require authentication.
   */
  deleteWebhookWithToken: Route<{
    params: ["webhookId", "webhookToken"],
    result: Discord.RESTDeleteAPIWebhookWithTokenResult,
  }>,
  /**
   * ## [Execute Webhook](https://discordapp.com/developers/docs/resources/webhook#execute-webhook)
   * 
   * Refer to [Uploading Files](https://discordapp.com/developers/docs/reference/uploading-files/) for details on attachments and `multipart/form-data` requests. Returns a message or `204 No Content` depending on the `wait` query parameter.
   * 
   * Note that when sending a message, you must provide a value for at **least one of** `content`, `embeds`, or `file`.
   * 
   * If the webhook channel is a forum channel, you must provide either `thread_id` in the query string params, or `thread_name` in the JSON/form params. If `thread_id` is provided, the message will send in that thread. If `thread_name` is provided, a thread with that name will be created in the forum channel.
   */
  executeWebhook: Route<{
    params: ["webhookId", "webhookToken"],
    query: Discord.RESTPostAPIWebhookWithTokenQuery,
    body: Discord.RESTPostAPIWebhookWithTokenJSONBody,
    result: never,
    file: true,
  }>,
  /**
   * ## [Execute Slack-Compatible Webhook](https://discordapp.com/developers/docs/resources/webhook#execute-slackcompatible-webhook)
   * 
   * Refer to [Slack's documentation](https://api.slack.com/incoming-webhooks) for more information. We do not support Slack's `channel`, `icon_emoji`, `mrkdwn`, or `mrkdwn_in` properties.
   */
  executeSlackCompatibleWebhook: Route<{
    params: ["webhookId", "webhookToken"],
    query: Discord.RESTPostAPIWebhookWithTokenSlackQuery,
    body: any,
    result: Discord.RESTPostAPIWebhookWithTokenSlackResult,
  }>,
  /**
   * ## [Execute GitHub-Compatible Webhook](https://discordapp.com/developers/docs/resources/webhook#execute-githubcompatible-webhook)
   * 
   * Add a new webhook to your GitHub repo (in the repo's settings), and use this endpoint as the "Payload URL." You can choose what events your Discord channel receives by choosing the "Let me select individual events" option and selecting individual events for the new webhook you're configuring.
   */
  executeGitHubCompatibleWebhook: Route<{
    params: ["webhookId", "webhookToken"],
    query: Discord.RESTPostAPIWebhookWithTokenGitHubQuery,
    body: any,
    result: Discord.RESTPostAPIWebhookWithTokenGitHubResult,
  }>,
  /**
   * ## [Get Webhook Message](https://discordapp.com/developers/docs/resources/webhook#get-webhook-message)
   * 
   * Returns a previously-sent webhook message from the same token. Returns a [message](https://discordapp.com/developers/docs/resources/channel#message-object) object on success.
   */
  getWebhookMessage: Route<{
    params: ["webhookId", "webhookToken", "messageId"],
    query: { thread_id?: boolean },
    result: Discord.RESTGetAPIWebhookWithTokenMessageResult,
  }>,
  /**
   * ## [Edit Webhook Message](https://discordapp.com/developers/docs/resources/webhook#edit-webhook-message)
   * 
   * Edits a previously-sent webhook message from the same token. Returns a [message](https://discordapp.com/developers/docs/resources/channel#message-object) object on success.
   * 
   * When the `content` field is edited, the `mentions` array in the message object will be reconstructed from scratch based on the new content. The `allowed_mentions` field of the edit request controls how this happens. If there is no explicit `allowed_mentions` in the edit request, the content will be parsed with _default_ allowances, that is, without regard to whether or not an `allowed_mentions` was present in the request that originally created the message.
   * 
   * Refer to [Uploading Files](#DOCS_REFERENCE/uploading-files) for details on attachments and `multipart/form-data` requests.
   * Any provided files will be **appended** to the message. To remove or replace files you will have to supply the `attachments` field which specifies the files to retain on the message after edit.
   * 
   * Starting with API v10, the `attachments` array must contain all attachments that should be present after edit, including **retained and new** attachments provided in the request body.
   * 
   * All parameters to this endpoint are optional and nullable.
   */
  editWebhookMessage: Route<{
    params: ["webhookId", "webhookToken", "messageId"],
    query: { thread_id?: boolean },
    body: Discord.RESTPatchAPIWebhookWithTokenMessageJSONBody,
    result: Discord.RESTPatchAPIWebhookWithTokenMessageResult,
    file: true,
  }>,
  /**
   * ## [Delete Webhook Message](https://discordapp.com/developers/docs/resources/webhook#delete-webhook-message)
   * 
   * Deletes a message that was created by the webhook. Returns a `204 No Content` response on success.
   */
  deleteWebhookMessage: Route<{
    params: ["webhookId", "webhookToken", "messageId"],
    query: { thread_id?: boolean },
    result: never,
  }>,
}>;
export declare const Webhook: RouteGroupClass<Webhook>;
