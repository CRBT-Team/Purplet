const list = (
      await asyncMap(
        this.#features,
        feat =>
          (typeof feat.applicationCommands === 'function'
            ? feat.applicationCommands.call(feat)
            : feat.applicationCommands) ?? []
      )
    ).flat();

    const toBeMerged = list.filter(
      x => x.type === ApplicationCommandType.ChatInput && x.name.includes(' ')
    );
    const commandNamesToBeMerged = [...new Set(toBeMerged.map(x => x.name.split(' ')[0]))];
    const rest = list.filter(x => !toBeMerged.includes(x));

    for (const name of commandNamesToBeMerged) {
      const cmd = rest.find(x => x.name === name);
      const merged = toBeMerged.filter(x =>
        x.name.startsWith(name + ' ')
      ) as RESTPostAPIChatInputApplicationCommandsJSONBody[];

      if (!cmd) {
        throw new Error(`Could not find slash command group "${name}"`);
      }
      const isTwoLevel = merged.some(x => x.name.split(' ').length === 3);

      if (isTwoLevel) {
        cmd.options = merged
          .filter(x => x.name.split(' ').length === 2)
          .map(x => ({
            name: x.name.split(' ')[1],
            type: ApplicationCommandOptionType.SubcommandGroup,
            description: x.description,
            name_localizations: x.name_localizations,
            description_localizations: x.description_localizations,
            options: merged
              .filter(x => x.name.split(' ').length === 3)
              .map(x => ({
                name: x.name.split(' ')[2],
                type: ApplicationCommandOptionType.Subcommand,
                description: x.description,
                name_localizations: x.name_localizations,
                description_localizations: x.description_localizations,
                options: x.options as APIApplicationCommandBasicOption[],
              })),
          }));
      } else {
        cmd.options = merged.map(x => ({
          name: x.name.split(' ')[1],
          type: ApplicationCommandOptionType.Subcommand,
          description: x.description,
          name_localizations: x.name_localizations,
          description_localizations: x.description_localizations,
          options: x.options as APIApplicationCommandBasicOption[],
        }));
      }
    }



    